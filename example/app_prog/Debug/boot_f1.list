
boot_f1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d68  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002e74  08002e74  00012e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ea0  08002ea0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002ea0  08002ea0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ea0  08002ea0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ea0  08002ea0  00012ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ea4  08002ea4  00012ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002ea8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004fc  2000000c  08002eb4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000508  08002eb4  00020508  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007ca3  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001806  00000000  00000000  00027d1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006f8  00000000  00000000  00029528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000054f  00000000  00000000  00029c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000160ba  00000000  00000000  0002a16f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008bc3  00000000  00000000  00040229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007e533  00000000  00000000  00048dec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001ab8  00000000  00000000  000c7320  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000c8dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e5c 	.word	0x08002e5c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002e5c 	.word	0x08002e5c

0800014c <flash_unlock>:
#include "boot_f1.h"

void flash_unlock()
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
    FLASH->KEYR = 0x45670123;
 8000150:	4b04      	ldr	r3, [pc, #16]	; (8000164 <flash_unlock+0x18>)
 8000152:	4a05      	ldr	r2, [pc, #20]	; (8000168 <flash_unlock+0x1c>)
 8000154:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = 0xCDEF89AB;
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <flash_unlock+0x18>)
 8000158:	4a04      	ldr	r2, [pc, #16]	; (800016c <flash_unlock+0x20>)
 800015a:	605a      	str	r2, [r3, #4]
}
 800015c:	bf00      	nop
 800015e:	46bd      	mov	sp, r7
 8000160:	bc80      	pop	{r7}
 8000162:	4770      	bx	lr
 8000164:	40022000 	.word	0x40022000
 8000168:	45670123 	.word	0x45670123
 800016c:	cdef89ab 	.word	0xcdef89ab

08000170 <flash_lock>:

void flash_lock()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
    FLASH->CR |= FLASH_CR_LOCK;
 8000174:	4b04      	ldr	r3, [pc, #16]	; (8000188 <flash_lock+0x18>)
 8000176:	691b      	ldr	r3, [r3, #16]
 8000178:	4a03      	ldr	r2, [pc, #12]	; (8000188 <flash_lock+0x18>)
 800017a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800017e:	6113      	str	r3, [r2, #16]
}
 8000180:	bf00      	nop
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	40022000 	.word	0x40022000

0800018c <flash_erase>:

void flash_erase(volatile uint32_t addreg)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	b082      	sub	sp, #8
 8000190:	af00      	add	r7, sp, #0
 8000192:	6078      	str	r0, [r7, #4]
    flash_unlock();
 8000194:	f7ff ffda 	bl	800014c <flash_unlock>
    while (FLASH->SR & FLASH_SR_BSY)
 8000198:	bf00      	nop
 800019a:	4b17      	ldr	r3, [pc, #92]	; (80001f8 <flash_erase+0x6c>)
 800019c:	68db      	ldr	r3, [r3, #12]
 800019e:	f003 0301 	and.w	r3, r3, #1
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	d1f9      	bne.n	800019a <flash_erase+0xe>
        ;
    FLASH->CR |= FLASH_CR_PER;
 80001a6:	4b14      	ldr	r3, [pc, #80]	; (80001f8 <flash_erase+0x6c>)
 80001a8:	691b      	ldr	r3, [r3, #16]
 80001aa:	4a13      	ldr	r2, [pc, #76]	; (80001f8 <flash_erase+0x6c>)
 80001ac:	f043 0302 	orr.w	r3, r3, #2
 80001b0:	6113      	str	r3, [r2, #16]
    FLASH->AR = addreg;
 80001b2:	4a11      	ldr	r2, [pc, #68]	; (80001f8 <flash_erase+0x6c>)
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	6153      	str	r3, [r2, #20]
    FLASH->CR |= FLASH_CR_STRT;
 80001b8:	4b0f      	ldr	r3, [pc, #60]	; (80001f8 <flash_erase+0x6c>)
 80001ba:	691b      	ldr	r3, [r3, #16]
 80001bc:	4a0e      	ldr	r2, [pc, #56]	; (80001f8 <flash_erase+0x6c>)
 80001be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80001c2:	6113      	str	r3, [r2, #16]
    while (FLASH->SR & FLASH_SR_BSY)
 80001c4:	bf00      	nop
 80001c6:	4b0c      	ldr	r3, [pc, #48]	; (80001f8 <flash_erase+0x6c>)
 80001c8:	68db      	ldr	r3, [r3, #12]
 80001ca:	f003 0301 	and.w	r3, r3, #1
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d1f9      	bne.n	80001c6 <flash_erase+0x3a>
        ;
    FLASH->CR &= ~FLASH_CR_PER;
 80001d2:	4b09      	ldr	r3, [pc, #36]	; (80001f8 <flash_erase+0x6c>)
 80001d4:	691b      	ldr	r3, [r3, #16]
 80001d6:	4a08      	ldr	r2, [pc, #32]	; (80001f8 <flash_erase+0x6c>)
 80001d8:	f023 0302 	bic.w	r3, r3, #2
 80001dc:	6113      	str	r3, [r2, #16]
    FLASH->CR &= ~FLASH_CR_STRT;
 80001de:	4b06      	ldr	r3, [pc, #24]	; (80001f8 <flash_erase+0x6c>)
 80001e0:	691b      	ldr	r3, [r3, #16]
 80001e2:	4a05      	ldr	r2, [pc, #20]	; (80001f8 <flash_erase+0x6c>)
 80001e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80001e8:	6113      	str	r3, [r2, #16]
    flash_lock();
 80001ea:	f7ff ffc1 	bl	8000170 <flash_lock>
}
 80001ee:	bf00      	nop
 80001f0:	3708      	adds	r7, #8
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40022000 	.word	0x40022000

080001fc <flash_write>:

void flash_write(volatile uint32_t addreg, uint8_t *datawrite, uint32_t datalen)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b086      	sub	sp, #24
 8000200:	af00      	add	r7, sp, #0
 8000202:	60f8      	str	r0, [r7, #12]
 8000204:	60b9      	str	r1, [r7, #8]
 8000206:	607a      	str	r2, [r7, #4]
    flash_unlock();
 8000208:	f7ff ffa0 	bl	800014c <flash_unlock>
    while (FLASH->SR & FLASH_SR_BSY)
 800020c:	bf00      	nop
 800020e:	4b1a      	ldr	r3, [pc, #104]	; (8000278 <flash_write+0x7c>)
 8000210:	68db      	ldr	r3, [r3, #12]
 8000212:	f003 0301 	and.w	r3, r3, #1
 8000216:	2b00      	cmp	r3, #0
 8000218:	d1f9      	bne.n	800020e <flash_write+0x12>
        ;
    FLASH->CR |= FLASH_CR_PG;
 800021a:	4b17      	ldr	r3, [pc, #92]	; (8000278 <flash_write+0x7c>)
 800021c:	691b      	ldr	r3, [r3, #16]
 800021e:	4a16      	ldr	r2, [pc, #88]	; (8000278 <flash_write+0x7c>)
 8000220:	f043 0301 	orr.w	r3, r3, #1
 8000224:	6113      	str	r3, [r2, #16]
    for (uint32_t count = 0; count < (datalen / 2); count++)
 8000226:	2300      	movs	r3, #0
 8000228:	617b      	str	r3, [r7, #20]
 800022a:	e00c      	b.n	8000246 <flash_write+0x4a>
    {
        *(uint16_t *)(addreg + count*2U) = *(uint16_t *)(datawrite + count*2U);
 800022c:	697b      	ldr	r3, [r7, #20]
 800022e:	005b      	lsls	r3, r3, #1
 8000230:	68ba      	ldr	r2, [r7, #8]
 8000232:	4413      	add	r3, r2
 8000234:	697a      	ldr	r2, [r7, #20]
 8000236:	0051      	lsls	r1, r2, #1
 8000238:	68fa      	ldr	r2, [r7, #12]
 800023a:	440a      	add	r2, r1
 800023c:	881b      	ldrh	r3, [r3, #0]
 800023e:	8013      	strh	r3, [r2, #0]
    for (uint32_t count = 0; count < (datalen / 2); count++)
 8000240:	697b      	ldr	r3, [r7, #20]
 8000242:	3301      	adds	r3, #1
 8000244:	617b      	str	r3, [r7, #20]
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	085b      	lsrs	r3, r3, #1
 800024a:	697a      	ldr	r2, [r7, #20]
 800024c:	429a      	cmp	r2, r3
 800024e:	d3ed      	bcc.n	800022c <flash_write+0x30>
    }
    while (FLASH->SR & FLASH_SR_BSY)
 8000250:	bf00      	nop
 8000252:	4b09      	ldr	r3, [pc, #36]	; (8000278 <flash_write+0x7c>)
 8000254:	68db      	ldr	r3, [r3, #12]
 8000256:	f003 0301 	and.w	r3, r3, #1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d1f9      	bne.n	8000252 <flash_write+0x56>
        ;
    FLASH->CR &= ~FLASH_CR_PG;
 800025e:	4b06      	ldr	r3, [pc, #24]	; (8000278 <flash_write+0x7c>)
 8000260:	691b      	ldr	r3, [r3, #16]
 8000262:	4a05      	ldr	r2, [pc, #20]	; (8000278 <flash_write+0x7c>)
 8000264:	f023 0301 	bic.w	r3, r3, #1
 8000268:	6113      	str	r3, [r2, #16]
    flash_lock();
 800026a:	f7ff ff81 	bl	8000170 <flash_lock>
}
 800026e:	bf00      	nop
 8000270:	3718      	adds	r7, #24
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	40022000 	.word	0x40022000

0800027c <boot2>:
	app_reset_handler = (void*)app_reset_handler_addr;
	app_reset_handler();
}

void boot2(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b082      	sub	sp, #8
 8000280:	af00      	add	r7, sp, #0
	  void (*app_reset_handler)(void) = (void*)(*((volatile uint32_t*) (BASE_ADDRESS_FLASH + 4U)));
 8000282:	4b0e      	ldr	r3, [pc, #56]	; (80002bc <boot2+0x40>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	607b      	str	r3, [r7, #4]

	  // Turn OFF the Green Led to tell the user that Bootloader is not running
//	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET );    //Green LED OFF

	  /* Reset the Clock */
	  HAL_RCC_DeInit();
 8000288:	f001 f90c 	bl	80014a4 <HAL_RCC_DeInit>
	  HAL_DeInit();
 800028c:	f000 fb30 	bl	80008f0 <HAL_DeInit>
	  __set_MSP(*(volatile uint32_t*) BASE_ADDRESS_FLASH);
 8000290:	4b0b      	ldr	r3, [pc, #44]	; (80002c0 <boot2+0x44>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	f383 8808 	msr	MSP, r3
}
 800029c:	bf00      	nop
	  SysTick->CTRL = 0;
 800029e:	4b09      	ldr	r3, [pc, #36]	; (80002c4 <boot2+0x48>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	601a      	str	r2, [r3, #0]
	  SysTick->LOAD = 0;
 80002a4:	4b07      	ldr	r3, [pc, #28]	; (80002c4 <boot2+0x48>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	605a      	str	r2, [r3, #4]
	  SysTick->VAL = 0;
 80002aa:	4b06      	ldr	r3, [pc, #24]	; (80002c4 <boot2+0x48>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	609a      	str	r2, [r3, #8]

	  /* Jump to application */
//	  SCB->VTOR = BASE_ADDRESS_FLASH;
	  app_reset_handler();    //call the app reset handler
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	4798      	blx	r3
//	  NVIC_SystemReset();
}
 80002b4:	bf00      	nop
 80002b6:	3708      	adds	r7, #8
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	08010004 	.word	0x08010004
 80002c0:	08010000 	.word	0x08010000
 80002c4:	e000e010 	.word	0xe000e010

080002c8 <HAL_UART_RxCpltCallback>:
uint8_t count_to_stop = 0;
uint8_t count_to_start = 0;
volatile uint8_t temp = 0;
uint8_t khoa;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b082      	sub	sp, #8
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart1.Instance)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	681a      	ldr	r2, [r3, #0]
 80002d4:	4b09      	ldr	r3, [pc, #36]	; (80002fc <HAL_UART_RxCpltCallback+0x34>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	429a      	cmp	r2, r3
 80002da:	d105      	bne.n	80002e8 <HAL_UART_RxCpltCallback+0x20>
	{
		count_to_start ++;
 80002dc:	4b08      	ldr	r3, [pc, #32]	; (8000300 <HAL_UART_RxCpltCallback+0x38>)
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	3301      	adds	r3, #1
 80002e2:	b2da      	uxtb	r2, r3
 80002e4:	4b06      	ldr	r3, [pc, #24]	; (8000300 <HAL_UART_RxCpltCallback+0x38>)
 80002e6:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Receive_DMA(&huart1, a, 1024);
 80002e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80002ec:	4905      	ldr	r1, [pc, #20]	; (8000304 <HAL_UART_RxCpltCallback+0x3c>)
 80002ee:	4803      	ldr	r0, [pc, #12]	; (80002fc <HAL_UART_RxCpltCallback+0x34>)
 80002f0:	f001 fe55 	bl	8001f9e <HAL_UART_Receive_DMA>
}
 80002f4:	bf00      	nop
 80002f6:	3708      	adds	r7, #8
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	20000028 	.word	0x20000028
 8000300:	200004fe 	.word	0x200004fe
 8000304:	200000fc 	.word	0x200000fc

08000308 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800030c:	f000 fada 	bl	80008c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000310:	f000 f86c 	bl	80003ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000314:	f000 f922 	bl	800055c <MX_GPIO_Init>
  MX_DMA_Init();
 8000318:	f000 f902 	bl	8000520 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800031c:	f000 f8ac 	bl	8000478 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000320:	f000 f8d4 	bl	80004cc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
//  flash_erase((uint32_t)0x0800F000);
//  flash_write((uint32_t)0x0800F000, a, 8);
//  flash_read((uint32_t)0x0800F000, b, 10);
  HAL_UART_Receive_DMA(&huart1, a, 1024);
 8000324:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000328:	4926      	ldr	r1, [pc, #152]	; (80003c4 <main+0xbc>)
 800032a:	4827      	ldr	r0, [pc, #156]	; (80003c8 <main+0xc0>)
 800032c:	f001 fe37 	bl	8001f9e <HAL_UART_Receive_DMA>
  khoa = 0;
 8000330:	4b26      	ldr	r3, [pc, #152]	; (80003cc <main+0xc4>)
 8000332:	2200      	movs	r2, #0
 8000334:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8000336:	2200      	movs	r2, #0
 8000338:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800033c:	4824      	ldr	r0, [pc, #144]	; (80003d0 <main+0xc8>)
 800033e:	f001 f899 	bl	8001474 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (count_to_start == 1)
 8000342:	4b24      	ldr	r3, [pc, #144]	; (80003d4 <main+0xcc>)
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	2b01      	cmp	r3, #1
 8000348:	d127      	bne.n	800039a <main+0x92>
	  {
		  HAL_UART_Transmit(&huart3, a, 1024, 150);
 800034a:	2396      	movs	r3, #150	; 0x96
 800034c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000350:	491c      	ldr	r1, [pc, #112]	; (80003c4 <main+0xbc>)
 8000352:	4821      	ldr	r0, [pc, #132]	; (80003d8 <main+0xd0>)
 8000354:	f001 fda0 	bl	8001e98 <HAL_UART_Transmit>
		  flash_erase(BASE_ADDRESS_FLASH+ 1024*count_to_stop);
 8000358:	4b20      	ldr	r3, [pc, #128]	; (80003dc <main+0xd4>)
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000360:	3340      	adds	r3, #64	; 0x40
 8000362:	029b      	lsls	r3, r3, #10
 8000364:	4618      	mov	r0, r3
 8000366:	f7ff ff11 	bl	800018c <flash_erase>
		  flash_write(BASE_ADDRESS_FLASH + 1024*count_to_stop, a, 1024);
 800036a:	4b1c      	ldr	r3, [pc, #112]	; (80003dc <main+0xd4>)
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000372:	3340      	adds	r3, #64	; 0x40
 8000374:	029b      	lsls	r3, r3, #10
 8000376:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800037a:	4912      	ldr	r1, [pc, #72]	; (80003c4 <main+0xbc>)
 800037c:	4618      	mov	r0, r3
 800037e:	f7ff ff3d 	bl	80001fc <flash_write>
		  count_to_start = 0;
 8000382:	4b14      	ldr	r3, [pc, #80]	; (80003d4 <main+0xcc>)
 8000384:	2200      	movs	r2, #0
 8000386:	701a      	strb	r2, [r3, #0]
//		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
		  count_to_stop ++;
 8000388:	4b14      	ldr	r3, [pc, #80]	; (80003dc <main+0xd4>)
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	3301      	adds	r3, #1
 800038e:	b2da      	uxtb	r2, r3
 8000390:	4b12      	ldr	r3, [pc, #72]	; (80003dc <main+0xd4>)
 8000392:	701a      	strb	r2, [r3, #0]
		  temp = 0;
 8000394:	4b12      	ldr	r3, [pc, #72]	; (80003e0 <main+0xd8>)
 8000396:	2200      	movs	r2, #0
 8000398:	701a      	strb	r2, [r3, #0]
	  }
	  if (count_to_stop == 16)
 800039a:	4b10      	ldr	r3, [pc, #64]	; (80003dc <main+0xd4>)
 800039c:	781b      	ldrb	r3, [r3, #0]
 800039e:	2b10      	cmp	r3, #16
 80003a0:	d1cf      	bne.n	8000342 <main+0x3a>
	  {
		  HAL_Delay(3000);
 80003a2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80003a6:	f000 fb0d 	bl	80009c4 <HAL_Delay>
  __ASM volatile ("cpsid i" : : : "memory");
 80003aa:	b672      	cpsid	i
}
 80003ac:	bf00      	nop
//		  boot_to_app();
			__disable_irq();
			SCB->VTOR = 0x8010000;
 80003ae:	4b0d      	ldr	r3, [pc, #52]	; (80003e4 <main+0xdc>)
 80003b0:	4a0d      	ldr	r2, [pc, #52]	; (80003e8 <main+0xe0>)
 80003b2:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80003b4:	f3bf 8f4f 	dsb	sy
}
 80003b8:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 80003ba:	b662      	cpsie	i
}
 80003bc:	bf00      	nop
			__DSB();
			__enable_irq();
		  boot2();
 80003be:	f7ff ff5d 	bl	800027c <boot2>
	  if (count_to_start == 1)
 80003c2:	e7be      	b.n	8000342 <main+0x3a>
 80003c4:	200000fc 	.word	0x200000fc
 80003c8:	20000028 	.word	0x20000028
 80003cc:	20000500 	.word	0x20000500
 80003d0:	40011000 	.word	0x40011000
 80003d4:	200004fe 	.word	0x200004fe
 80003d8:	20000070 	.word	0x20000070
 80003dc:	200004fd 	.word	0x200004fd
 80003e0:	200004ff 	.word	0x200004ff
 80003e4:	e000ed00 	.word	0xe000ed00
 80003e8:	08010000 	.word	0x08010000

080003ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b090      	sub	sp, #64	; 0x40
 80003f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003f2:	f107 0318 	add.w	r3, r7, #24
 80003f6:	2228      	movs	r2, #40	; 0x28
 80003f8:	2100      	movs	r1, #0
 80003fa:	4618      	mov	r0, r3
 80003fc:	f002 fd02 	bl	8002e04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000400:	1d3b      	adds	r3, r7, #4
 8000402:	2200      	movs	r2, #0
 8000404:	601a      	str	r2, [r3, #0]
 8000406:	605a      	str	r2, [r3, #4]
 8000408:	609a      	str	r2, [r3, #8]
 800040a:	60da      	str	r2, [r3, #12]
 800040c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800040e:	2301      	movs	r3, #1
 8000410:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000412:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000416:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000418:	2300      	movs	r3, #0
 800041a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800041c:	2301      	movs	r3, #1
 800041e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000420:	2302      	movs	r3, #2
 8000422:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000424:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000428:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800042a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800042e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000430:	f107 0318 	add.w	r3, r7, #24
 8000434:	4618      	mov	r0, r3
 8000436:	f001 f8cf 	bl	80015d8 <HAL_RCC_OscConfig>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d001      	beq.n	8000444 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000440:	f000 f8e4 	bl	800060c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000444:	230f      	movs	r3, #15
 8000446:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000448:	2302      	movs	r3, #2
 800044a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800044c:	2300      	movs	r3, #0
 800044e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000450:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000454:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000456:	2300      	movs	r3, #0
 8000458:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800045a:	1d3b      	adds	r3, r7, #4
 800045c:	2102      	movs	r1, #2
 800045e:	4618      	mov	r0, r3
 8000460:	f001 fb3c 	bl	8001adc <HAL_RCC_ClockConfig>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800046a:	f000 f8cf 	bl	800060c <Error_Handler>
  }
}
 800046e:	bf00      	nop
 8000470:	3740      	adds	r7, #64	; 0x40
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
	...

08000478 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800047c:	4b11      	ldr	r3, [pc, #68]	; (80004c4 <MX_USART1_UART_Init+0x4c>)
 800047e:	4a12      	ldr	r2, [pc, #72]	; (80004c8 <MX_USART1_UART_Init+0x50>)
 8000480:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000482:	4b10      	ldr	r3, [pc, #64]	; (80004c4 <MX_USART1_UART_Init+0x4c>)
 8000484:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000488:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800048a:	4b0e      	ldr	r3, [pc, #56]	; (80004c4 <MX_USART1_UART_Init+0x4c>)
 800048c:	2200      	movs	r2, #0
 800048e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000490:	4b0c      	ldr	r3, [pc, #48]	; (80004c4 <MX_USART1_UART_Init+0x4c>)
 8000492:	2200      	movs	r2, #0
 8000494:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000496:	4b0b      	ldr	r3, [pc, #44]	; (80004c4 <MX_USART1_UART_Init+0x4c>)
 8000498:	2200      	movs	r2, #0
 800049a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800049c:	4b09      	ldr	r3, [pc, #36]	; (80004c4 <MX_USART1_UART_Init+0x4c>)
 800049e:	220c      	movs	r2, #12
 80004a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004a2:	4b08      	ldr	r3, [pc, #32]	; (80004c4 <MX_USART1_UART_Init+0x4c>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004a8:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <MX_USART1_UART_Init+0x4c>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004ae:	4805      	ldr	r0, [pc, #20]	; (80004c4 <MX_USART1_UART_Init+0x4c>)
 80004b0:	f001 fca2 	bl	8001df8 <HAL_UART_Init>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80004ba:	f000 f8a7 	bl	800060c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004be:	bf00      	nop
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	20000028 	.word	0x20000028
 80004c8:	40013800 	.word	0x40013800

080004cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80004d0:	4b11      	ldr	r3, [pc, #68]	; (8000518 <MX_USART3_UART_Init+0x4c>)
 80004d2:	4a12      	ldr	r2, [pc, #72]	; (800051c <MX_USART3_UART_Init+0x50>)
 80004d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80004d6:	4b10      	ldr	r3, [pc, #64]	; (8000518 <MX_USART3_UART_Init+0x4c>)
 80004d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80004de:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <MX_USART3_UART_Init+0x4c>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80004e4:	4b0c      	ldr	r3, [pc, #48]	; (8000518 <MX_USART3_UART_Init+0x4c>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80004ea:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <MX_USART3_UART_Init+0x4c>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80004f0:	4b09      	ldr	r3, [pc, #36]	; (8000518 <MX_USART3_UART_Init+0x4c>)
 80004f2:	220c      	movs	r2, #12
 80004f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004f6:	4b08      	ldr	r3, [pc, #32]	; (8000518 <MX_USART3_UART_Init+0x4c>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80004fc:	4b06      	ldr	r3, [pc, #24]	; (8000518 <MX_USART3_UART_Init+0x4c>)
 80004fe:	2200      	movs	r2, #0
 8000500:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000502:	4805      	ldr	r0, [pc, #20]	; (8000518 <MX_USART3_UART_Init+0x4c>)
 8000504:	f001 fc78 	bl	8001df8 <HAL_UART_Init>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800050e:	f000 f87d 	bl	800060c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000512:	bf00      	nop
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	20000070 	.word	0x20000070
 800051c:	40004800 	.word	0x40004800

08000520 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000526:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <MX_DMA_Init+0x38>)
 8000528:	695b      	ldr	r3, [r3, #20]
 800052a:	4a0b      	ldr	r2, [pc, #44]	; (8000558 <MX_DMA_Init+0x38>)
 800052c:	f043 0301 	orr.w	r3, r3, #1
 8000530:	6153      	str	r3, [r2, #20]
 8000532:	4b09      	ldr	r3, [pc, #36]	; (8000558 <MX_DMA_Init+0x38>)
 8000534:	695b      	ldr	r3, [r3, #20]
 8000536:	f003 0301 	and.w	r3, r3, #1
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800053e:	2200      	movs	r2, #0
 8000540:	2100      	movs	r1, #0
 8000542:	200f      	movs	r0, #15
 8000544:	f000 fb39 	bl	8000bba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000548:	200f      	movs	r0, #15
 800054a:	f000 fb52 	bl	8000bf2 <HAL_NVIC_EnableIRQ>

}
 800054e:	bf00      	nop
 8000550:	3708      	adds	r7, #8
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	40021000 	.word	0x40021000

0800055c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b088      	sub	sp, #32
 8000560:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000562:	f107 0310 	add.w	r3, r7, #16
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	605a      	str	r2, [r3, #4]
 800056c:	609a      	str	r2, [r3, #8]
 800056e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000570:	4b24      	ldr	r3, [pc, #144]	; (8000604 <MX_GPIO_Init+0xa8>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	4a23      	ldr	r2, [pc, #140]	; (8000604 <MX_GPIO_Init+0xa8>)
 8000576:	f043 0310 	orr.w	r3, r3, #16
 800057a:	6193      	str	r3, [r2, #24]
 800057c:	4b21      	ldr	r3, [pc, #132]	; (8000604 <MX_GPIO_Init+0xa8>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	f003 0310 	and.w	r3, r3, #16
 8000584:	60fb      	str	r3, [r7, #12]
 8000586:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000588:	4b1e      	ldr	r3, [pc, #120]	; (8000604 <MX_GPIO_Init+0xa8>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	4a1d      	ldr	r2, [pc, #116]	; (8000604 <MX_GPIO_Init+0xa8>)
 800058e:	f043 0320 	orr.w	r3, r3, #32
 8000592:	6193      	str	r3, [r2, #24]
 8000594:	4b1b      	ldr	r3, [pc, #108]	; (8000604 <MX_GPIO_Init+0xa8>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	f003 0320 	and.w	r3, r3, #32
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a0:	4b18      	ldr	r3, [pc, #96]	; (8000604 <MX_GPIO_Init+0xa8>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	4a17      	ldr	r2, [pc, #92]	; (8000604 <MX_GPIO_Init+0xa8>)
 80005a6:	f043 0308 	orr.w	r3, r3, #8
 80005aa:	6193      	str	r3, [r2, #24]
 80005ac:	4b15      	ldr	r3, [pc, #84]	; (8000604 <MX_GPIO_Init+0xa8>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	f003 0308 	and.w	r3, r3, #8
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b8:	4b12      	ldr	r3, [pc, #72]	; (8000604 <MX_GPIO_Init+0xa8>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	4a11      	ldr	r2, [pc, #68]	; (8000604 <MX_GPIO_Init+0xa8>)
 80005be:	f043 0304 	orr.w	r3, r3, #4
 80005c2:	6193      	str	r3, [r2, #24]
 80005c4:	4b0f      	ldr	r3, [pc, #60]	; (8000604 <MX_GPIO_Init+0xa8>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	f003 0304 	and.w	r3, r3, #4
 80005cc:	603b      	str	r3, [r7, #0]
 80005ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d6:	480c      	ldr	r0, [pc, #48]	; (8000608 <MX_GPIO_Init+0xac>)
 80005d8:	f000 ff4c 	bl	8001474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80005dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e2:	2301      	movs	r3, #1
 80005e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e6:	2300      	movs	r3, #0
 80005e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ea:	2302      	movs	r3, #2
 80005ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005ee:	f107 0310 	add.w	r3, r7, #16
 80005f2:	4619      	mov	r1, r3
 80005f4:	4804      	ldr	r0, [pc, #16]	; (8000608 <MX_GPIO_Init+0xac>)
 80005f6:	f000 fdb9 	bl	800116c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005fa:	bf00      	nop
 80005fc:	3720      	adds	r7, #32
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40021000 	.word	0x40021000
 8000608:	40011000 	.word	0x40011000

0800060c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000610:	b672      	cpsid	i
}
 8000612:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000614:	e7fe      	b.n	8000614 <Error_Handler+0x8>
	...

08000618 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800061e:	4b15      	ldr	r3, [pc, #84]	; (8000674 <HAL_MspInit+0x5c>)
 8000620:	699b      	ldr	r3, [r3, #24]
 8000622:	4a14      	ldr	r2, [pc, #80]	; (8000674 <HAL_MspInit+0x5c>)
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6193      	str	r3, [r2, #24]
 800062a:	4b12      	ldr	r3, [pc, #72]	; (8000674 <HAL_MspInit+0x5c>)
 800062c:	699b      	ldr	r3, [r3, #24]
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000636:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <HAL_MspInit+0x5c>)
 8000638:	69db      	ldr	r3, [r3, #28]
 800063a:	4a0e      	ldr	r2, [pc, #56]	; (8000674 <HAL_MspInit+0x5c>)
 800063c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000640:	61d3      	str	r3, [r2, #28]
 8000642:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <HAL_MspInit+0x5c>)
 8000644:	69db      	ldr	r3, [r3, #28]
 8000646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800064e:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <HAL_MspInit+0x60>)
 8000650:	685b      	ldr	r3, [r3, #4]
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	4a04      	ldr	r2, [pc, #16]	; (8000678 <HAL_MspInit+0x60>)
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800066a:	bf00      	nop
 800066c:	3714      	adds	r7, #20
 800066e:	46bd      	mov	sp, r7
 8000670:	bc80      	pop	{r7}
 8000672:	4770      	bx	lr
 8000674:	40021000 	.word	0x40021000
 8000678:	40010000 	.word	0x40010000

0800067c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08a      	sub	sp, #40	; 0x28
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000684:	f107 0318 	add.w	r3, r7, #24
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4a50      	ldr	r2, [pc, #320]	; (80007d8 <HAL_UART_MspInit+0x15c>)
 8000698:	4293      	cmp	r3, r2
 800069a:	d161      	bne.n	8000760 <HAL_UART_MspInit+0xe4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800069c:	4b4f      	ldr	r3, [pc, #316]	; (80007dc <HAL_UART_MspInit+0x160>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	4a4e      	ldr	r2, [pc, #312]	; (80007dc <HAL_UART_MspInit+0x160>)
 80006a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a6:	6193      	str	r3, [r2, #24]
 80006a8:	4b4c      	ldr	r3, [pc, #304]	; (80007dc <HAL_UART_MspInit+0x160>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006b0:	617b      	str	r3, [r7, #20]
 80006b2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b4:	4b49      	ldr	r3, [pc, #292]	; (80007dc <HAL_UART_MspInit+0x160>)
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	4a48      	ldr	r2, [pc, #288]	; (80007dc <HAL_UART_MspInit+0x160>)
 80006ba:	f043 0304 	orr.w	r3, r3, #4
 80006be:	6193      	str	r3, [r2, #24]
 80006c0:	4b46      	ldr	r3, [pc, #280]	; (80007dc <HAL_UART_MspInit+0x160>)
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	f003 0304 	and.w	r3, r3, #4
 80006c8:	613b      	str	r3, [r7, #16]
 80006ca:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d2:	2302      	movs	r3, #2
 80006d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006d6:	2303      	movs	r3, #3
 80006d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006da:	f107 0318 	add.w	r3, r7, #24
 80006de:	4619      	mov	r1, r3
 80006e0:	483f      	ldr	r0, [pc, #252]	; (80007e0 <HAL_UART_MspInit+0x164>)
 80006e2:	f000 fd43 	bl	800116c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	2300      	movs	r3, #0
 80006f2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f4:	f107 0318 	add.w	r3, r7, #24
 80006f8:	4619      	mov	r1, r3
 80006fa:	4839      	ldr	r0, [pc, #228]	; (80007e0 <HAL_UART_MspInit+0x164>)
 80006fc:	f000 fd36 	bl	800116c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000700:	4b38      	ldr	r3, [pc, #224]	; (80007e4 <HAL_UART_MspInit+0x168>)
 8000702:	4a39      	ldr	r2, [pc, #228]	; (80007e8 <HAL_UART_MspInit+0x16c>)
 8000704:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000706:	4b37      	ldr	r3, [pc, #220]	; (80007e4 <HAL_UART_MspInit+0x168>)
 8000708:	2200      	movs	r2, #0
 800070a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800070c:	4b35      	ldr	r3, [pc, #212]	; (80007e4 <HAL_UART_MspInit+0x168>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000712:	4b34      	ldr	r3, [pc, #208]	; (80007e4 <HAL_UART_MspInit+0x168>)
 8000714:	2280      	movs	r2, #128	; 0x80
 8000716:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000718:	4b32      	ldr	r3, [pc, #200]	; (80007e4 <HAL_UART_MspInit+0x168>)
 800071a:	2200      	movs	r2, #0
 800071c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800071e:	4b31      	ldr	r3, [pc, #196]	; (80007e4 <HAL_UART_MspInit+0x168>)
 8000720:	2200      	movs	r2, #0
 8000722:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000724:	4b2f      	ldr	r3, [pc, #188]	; (80007e4 <HAL_UART_MspInit+0x168>)
 8000726:	2200      	movs	r2, #0
 8000728:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800072a:	4b2e      	ldr	r3, [pc, #184]	; (80007e4 <HAL_UART_MspInit+0x168>)
 800072c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000730:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000732:	482c      	ldr	r0, [pc, #176]	; (80007e4 <HAL_UART_MspInit+0x168>)
 8000734:	f000 fa78 	bl	8000c28 <HAL_DMA_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800073e:	f7ff ff65 	bl	800060c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	4a27      	ldr	r2, [pc, #156]	; (80007e4 <HAL_UART_MspInit+0x168>)
 8000746:	63da      	str	r2, [r3, #60]	; 0x3c
 8000748:	4a26      	ldr	r2, [pc, #152]	; (80007e4 <HAL_UART_MspInit+0x168>)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800074e:	2200      	movs	r2, #0
 8000750:	2100      	movs	r1, #0
 8000752:	2025      	movs	r0, #37	; 0x25
 8000754:	f000 fa31 	bl	8000bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000758:	2025      	movs	r0, #37	; 0x25
 800075a:	f000 fa4a 	bl	8000bf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800075e:	e036      	b.n	80007ce <HAL_UART_MspInit+0x152>
  else if(huart->Instance==USART3)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a21      	ldr	r2, [pc, #132]	; (80007ec <HAL_UART_MspInit+0x170>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d131      	bne.n	80007ce <HAL_UART_MspInit+0x152>
    __HAL_RCC_USART3_CLK_ENABLE();
 800076a:	4b1c      	ldr	r3, [pc, #112]	; (80007dc <HAL_UART_MspInit+0x160>)
 800076c:	69db      	ldr	r3, [r3, #28]
 800076e:	4a1b      	ldr	r2, [pc, #108]	; (80007dc <HAL_UART_MspInit+0x160>)
 8000770:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000774:	61d3      	str	r3, [r2, #28]
 8000776:	4b19      	ldr	r3, [pc, #100]	; (80007dc <HAL_UART_MspInit+0x160>)
 8000778:	69db      	ldr	r3, [r3, #28]
 800077a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000782:	4b16      	ldr	r3, [pc, #88]	; (80007dc <HAL_UART_MspInit+0x160>)
 8000784:	699b      	ldr	r3, [r3, #24]
 8000786:	4a15      	ldr	r2, [pc, #84]	; (80007dc <HAL_UART_MspInit+0x160>)
 8000788:	f043 0308 	orr.w	r3, r3, #8
 800078c:	6193      	str	r3, [r2, #24]
 800078e:	4b13      	ldr	r3, [pc, #76]	; (80007dc <HAL_UART_MspInit+0x160>)
 8000790:	699b      	ldr	r3, [r3, #24]
 8000792:	f003 0308 	and.w	r3, r3, #8
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800079a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800079e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a0:	2302      	movs	r3, #2
 80007a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007a4:	2303      	movs	r3, #3
 80007a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a8:	f107 0318 	add.w	r3, r7, #24
 80007ac:	4619      	mov	r1, r3
 80007ae:	4810      	ldr	r0, [pc, #64]	; (80007f0 <HAL_UART_MspInit+0x174>)
 80007b0:	f000 fcdc 	bl	800116c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80007b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ba:	2300      	movs	r3, #0
 80007bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c2:	f107 0318 	add.w	r3, r7, #24
 80007c6:	4619      	mov	r1, r3
 80007c8:	4809      	ldr	r0, [pc, #36]	; (80007f0 <HAL_UART_MspInit+0x174>)
 80007ca:	f000 fccf 	bl	800116c <HAL_GPIO_Init>
}
 80007ce:	bf00      	nop
 80007d0:	3728      	adds	r7, #40	; 0x28
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40013800 	.word	0x40013800
 80007dc:	40021000 	.word	0x40021000
 80007e0:	40010800 	.word	0x40010800
 80007e4:	200000b8 	.word	0x200000b8
 80007e8:	40020058 	.word	0x40020058
 80007ec:	40004800 	.word	0x40004800
 80007f0:	40010c00 	.word	0x40010c00

080007f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007f8:	e7fe      	b.n	80007f8 <NMI_Handler+0x4>

080007fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007fe:	e7fe      	b.n	80007fe <HardFault_Handler+0x4>

08000800 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000804:	e7fe      	b.n	8000804 <MemManage_Handler+0x4>

08000806 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800080a:	e7fe      	b.n	800080a <BusFault_Handler+0x4>

0800080c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000810:	e7fe      	b.n	8000810 <UsageFault_Handler+0x4>

08000812 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000812:	b480      	push	{r7}
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000816:	bf00      	nop
 8000818:	46bd      	mov	sp, r7
 800081a:	bc80      	pop	{r7}
 800081c:	4770      	bx	lr

0800081e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	46bd      	mov	sp, r7
 8000826:	bc80      	pop	{r7}
 8000828:	4770      	bx	lr

0800082a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800082e:	bf00      	nop
 8000830:	46bd      	mov	sp, r7
 8000832:	bc80      	pop	{r7}
 8000834:	4770      	bx	lr

08000836 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800083a:	f000 f8a7 	bl	800098c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000848:	4802      	ldr	r0, [pc, #8]	; (8000854 <DMA1_Channel5_IRQHandler+0x10>)
 800084a:	f000 fb5b 	bl	8000f04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	200000b8 	.word	0x200000b8

08000858 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800085c:	4802      	ldr	r0, [pc, #8]	; (8000868 <USART1_IRQHandler+0x10>)
 800085e:	f001 fbc3 	bl	8001fe8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000028 	.word	0x20000028

0800086c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000870:	bf00      	nop
 8000872:	46bd      	mov	sp, r7
 8000874:	bc80      	pop	{r7}
 8000876:	4770      	bx	lr

08000878 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000878:	f7ff fff8 	bl	800086c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800087c:	480b      	ldr	r0, [pc, #44]	; (80008ac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800087e:	490c      	ldr	r1, [pc, #48]	; (80008b0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000880:	4a0c      	ldr	r2, [pc, #48]	; (80008b4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000882:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000884:	e002      	b.n	800088c <LoopCopyDataInit>

08000886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800088a:	3304      	adds	r3, #4

0800088c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800088c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800088e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000890:	d3f9      	bcc.n	8000886 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000892:	4a09      	ldr	r2, [pc, #36]	; (80008b8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000894:	4c09      	ldr	r4, [pc, #36]	; (80008bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000898:	e001      	b.n	800089e <LoopFillZerobss>

0800089a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800089a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800089c:	3204      	adds	r2, #4

0800089e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800089e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a0:	d3fb      	bcc.n	800089a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008a2:	f002 fab7 	bl	8002e14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008a6:	f7ff fd2f 	bl	8000308 <main>
  bx lr
 80008aa:	4770      	bx	lr
  ldr r0, =_sdata
 80008ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008b0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008b4:	08002ea8 	.word	0x08002ea8
  ldr r2, =_sbss
 80008b8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008bc:	20000508 	.word	0x20000508

080008c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008c0:	e7fe      	b.n	80008c0 <ADC1_2_IRQHandler>
	...

080008c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008c8:	4b08      	ldr	r3, [pc, #32]	; (80008ec <HAL_Init+0x28>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a07      	ldr	r2, [pc, #28]	; (80008ec <HAL_Init+0x28>)
 80008ce:	f043 0310 	orr.w	r3, r3, #16
 80008d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008d4:	2003      	movs	r0, #3
 80008d6:	f000 f965 	bl	8000ba4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008da:	200f      	movs	r0, #15
 80008dc:	f000 f826 	bl	800092c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008e0:	f7ff fe9a 	bl	8000618 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008e4:	2300      	movs	r3, #0
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40022000 	.word	0x40022000

080008f0 <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 80008f4:	4b09      	ldr	r3, [pc, #36]	; (800091c <HAL_DeInit+0x2c>)
 80008f6:	f04f 32ff 	mov.w	r2, #4294967295
 80008fa:	611a      	str	r2, [r3, #16]
  __HAL_RCC_APB1_RELEASE_RESET();
 80008fc:	4b07      	ldr	r3, [pc, #28]	; (800091c <HAL_DeInit+0x2c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 8000902:	4b06      	ldr	r3, [pc, #24]	; (800091c <HAL_DeInit+0x2c>)
 8000904:	f04f 32ff 	mov.w	r2, #4294967295
 8000908:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 800090a:	4b04      	ldr	r3, [pc, #16]	; (800091c <HAL_DeInit+0x2c>)
 800090c:	2200      	movs	r2, #0
 800090e:	60da      	str	r2, [r3, #12]
  __HAL_RCC_AHB_FORCE_RESET();
  __HAL_RCC_AHB_RELEASE_RESET();
#endif

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000910:	f000 f806 	bl	8000920 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8000914:	2300      	movs	r3, #0
}
 8000916:	4618      	mov	r0, r3
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40021000 	.word	0x40021000

08000920 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr

0800092c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000934:	4b12      	ldr	r3, [pc, #72]	; (8000980 <HAL_InitTick+0x54>)
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	4b12      	ldr	r3, [pc, #72]	; (8000984 <HAL_InitTick+0x58>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	4619      	mov	r1, r3
 800093e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000942:	fbb3 f3f1 	udiv	r3, r3, r1
 8000946:	fbb2 f3f3 	udiv	r3, r2, r3
 800094a:	4618      	mov	r0, r3
 800094c:	f000 f95f 	bl	8000c0e <HAL_SYSTICK_Config>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000956:	2301      	movs	r3, #1
 8000958:	e00e      	b.n	8000978 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2b0f      	cmp	r3, #15
 800095e:	d80a      	bhi.n	8000976 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000960:	2200      	movs	r2, #0
 8000962:	6879      	ldr	r1, [r7, #4]
 8000964:	f04f 30ff 	mov.w	r0, #4294967295
 8000968:	f000 f927 	bl	8000bba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800096c:	4a06      	ldr	r2, [pc, #24]	; (8000988 <HAL_InitTick+0x5c>)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000972:	2300      	movs	r3, #0
 8000974:	e000      	b.n	8000978 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000976:	2301      	movs	r3, #1
}
 8000978:	4618      	mov	r0, r3
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000000 	.word	0x20000000
 8000984:	20000008 	.word	0x20000008
 8000988:	20000004 	.word	0x20000004

0800098c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000990:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <HAL_IncTick+0x1c>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	461a      	mov	r2, r3
 8000996:	4b05      	ldr	r3, [pc, #20]	; (80009ac <HAL_IncTick+0x20>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4413      	add	r3, r2
 800099c:	4a03      	ldr	r2, [pc, #12]	; (80009ac <HAL_IncTick+0x20>)
 800099e:	6013      	str	r3, [r2, #0]
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr
 80009a8:	20000008 	.word	0x20000008
 80009ac:	20000504 	.word	0x20000504

080009b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  return uwTick;
 80009b4:	4b02      	ldr	r3, [pc, #8]	; (80009c0 <HAL_GetTick+0x10>)
 80009b6:	681b      	ldr	r3, [r3, #0]
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bc80      	pop	{r7}
 80009be:	4770      	bx	lr
 80009c0:	20000504 	.word	0x20000504

080009c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009cc:	f7ff fff0 	bl	80009b0 <HAL_GetTick>
 80009d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009dc:	d005      	beq.n	80009ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009de:	4b0a      	ldr	r3, [pc, #40]	; (8000a08 <HAL_Delay+0x44>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	461a      	mov	r2, r3
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	4413      	add	r3, r2
 80009e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009ea:	bf00      	nop
 80009ec:	f7ff ffe0 	bl	80009b0 <HAL_GetTick>
 80009f0:	4602      	mov	r2, r0
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	1ad3      	subs	r3, r2, r3
 80009f6:	68fa      	ldr	r2, [r7, #12]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	d8f7      	bhi.n	80009ec <HAL_Delay+0x28>
  {
  }
}
 80009fc:	bf00      	nop
 80009fe:	bf00      	nop
 8000a00:	3710      	adds	r7, #16
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000008 	.word	0x20000008

08000a0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f003 0307 	and.w	r3, r3, #7
 8000a1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <__NVIC_SetPriorityGrouping+0x44>)
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a22:	68ba      	ldr	r2, [r7, #8]
 8000a24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a28:	4013      	ands	r3, r2
 8000a2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a3e:	4a04      	ldr	r2, [pc, #16]	; (8000a50 <__NVIC_SetPriorityGrouping+0x44>)
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	60d3      	str	r3, [r2, #12]
}
 8000a44:	bf00      	nop
 8000a46:	3714      	adds	r7, #20
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bc80      	pop	{r7}
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a58:	4b04      	ldr	r3, [pc, #16]	; (8000a6c <__NVIC_GetPriorityGrouping+0x18>)
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	0a1b      	lsrs	r3, r3, #8
 8000a5e:	f003 0307 	and.w	r3, r3, #7
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bc80      	pop	{r7}
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	db0b      	blt.n	8000a9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	f003 021f 	and.w	r2, r3, #31
 8000a88:	4906      	ldr	r1, [pc, #24]	; (8000aa4 <__NVIC_EnableIRQ+0x34>)
 8000a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8e:	095b      	lsrs	r3, r3, #5
 8000a90:	2001      	movs	r0, #1
 8000a92:	fa00 f202 	lsl.w	r2, r0, r2
 8000a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a9a:	bf00      	nop
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bc80      	pop	{r7}
 8000aa2:	4770      	bx	lr
 8000aa4:	e000e100 	.word	0xe000e100

08000aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	6039      	str	r1, [r7, #0]
 8000ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	db0a      	blt.n	8000ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	b2da      	uxtb	r2, r3
 8000ac0:	490c      	ldr	r1, [pc, #48]	; (8000af4 <__NVIC_SetPriority+0x4c>)
 8000ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac6:	0112      	lsls	r2, r2, #4
 8000ac8:	b2d2      	uxtb	r2, r2
 8000aca:	440b      	add	r3, r1
 8000acc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ad0:	e00a      	b.n	8000ae8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	b2da      	uxtb	r2, r3
 8000ad6:	4908      	ldr	r1, [pc, #32]	; (8000af8 <__NVIC_SetPriority+0x50>)
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	f003 030f 	and.w	r3, r3, #15
 8000ade:	3b04      	subs	r3, #4
 8000ae0:	0112      	lsls	r2, r2, #4
 8000ae2:	b2d2      	uxtb	r2, r2
 8000ae4:	440b      	add	r3, r1
 8000ae6:	761a      	strb	r2, [r3, #24]
}
 8000ae8:	bf00      	nop
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bc80      	pop	{r7}
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	e000e100 	.word	0xe000e100
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b089      	sub	sp, #36	; 0x24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	f003 0307 	and.w	r3, r3, #7
 8000b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b10:	69fb      	ldr	r3, [r7, #28]
 8000b12:	f1c3 0307 	rsb	r3, r3, #7
 8000b16:	2b04      	cmp	r3, #4
 8000b18:	bf28      	it	cs
 8000b1a:	2304      	movcs	r3, #4
 8000b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b1e:	69fb      	ldr	r3, [r7, #28]
 8000b20:	3304      	adds	r3, #4
 8000b22:	2b06      	cmp	r3, #6
 8000b24:	d902      	bls.n	8000b2c <NVIC_EncodePriority+0x30>
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	3b03      	subs	r3, #3
 8000b2a:	e000      	b.n	8000b2e <NVIC_EncodePriority+0x32>
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b30:	f04f 32ff 	mov.w	r2, #4294967295
 8000b34:	69bb      	ldr	r3, [r7, #24]
 8000b36:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3a:	43da      	mvns	r2, r3
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	401a      	ands	r2, r3
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b44:	f04f 31ff 	mov.w	r1, #4294967295
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b4e:	43d9      	mvns	r1, r3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b54:	4313      	orrs	r3, r2
         );
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3724      	adds	r7, #36	; 0x24
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr

08000b60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	3b01      	subs	r3, #1
 8000b6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b70:	d301      	bcc.n	8000b76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b72:	2301      	movs	r3, #1
 8000b74:	e00f      	b.n	8000b96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b76:	4a0a      	ldr	r2, [pc, #40]	; (8000ba0 <SysTick_Config+0x40>)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	3b01      	subs	r3, #1
 8000b7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b7e:	210f      	movs	r1, #15
 8000b80:	f04f 30ff 	mov.w	r0, #4294967295
 8000b84:	f7ff ff90 	bl	8000aa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b88:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <SysTick_Config+0x40>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b8e:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <SysTick_Config+0x40>)
 8000b90:	2207      	movs	r2, #7
 8000b92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b94:	2300      	movs	r3, #0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	e000e010 	.word	0xe000e010

08000ba4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f7ff ff2d 	bl	8000a0c <__NVIC_SetPriorityGrouping>
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b086      	sub	sp, #24
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	60b9      	str	r1, [r7, #8]
 8000bc4:	607a      	str	r2, [r7, #4]
 8000bc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bcc:	f7ff ff42 	bl	8000a54 <__NVIC_GetPriorityGrouping>
 8000bd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bd2:	687a      	ldr	r2, [r7, #4]
 8000bd4:	68b9      	ldr	r1, [r7, #8]
 8000bd6:	6978      	ldr	r0, [r7, #20]
 8000bd8:	f7ff ff90 	bl	8000afc <NVIC_EncodePriority>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000be2:	4611      	mov	r1, r2
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff ff5f 	bl	8000aa8 <__NVIC_SetPriority>
}
 8000bea:	bf00      	nop
 8000bec:	3718      	adds	r7, #24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b082      	sub	sp, #8
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff ff35 	bl	8000a70 <__NVIC_EnableIRQ>
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b082      	sub	sp, #8
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f7ff ffa2 	bl	8000b60 <SysTick_Config>
 8000c1c:	4603      	mov	r3, r0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
	...

08000c28 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d101      	bne.n	8000c3e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e043      	b.n	8000cc6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	461a      	mov	r2, r3
 8000c44:	4b22      	ldr	r3, [pc, #136]	; (8000cd0 <HAL_DMA_Init+0xa8>)
 8000c46:	4413      	add	r3, r2
 8000c48:	4a22      	ldr	r2, [pc, #136]	; (8000cd4 <HAL_DMA_Init+0xac>)
 8000c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c4e:	091b      	lsrs	r3, r3, #4
 8000c50:	009a      	lsls	r2, r3, #2
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4a1f      	ldr	r2, [pc, #124]	; (8000cd8 <HAL_DMA_Init+0xb0>)
 8000c5a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2202      	movs	r2, #2
 8000c60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000c72:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000c76:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000c80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	68db      	ldr	r3, [r3, #12]
 8000c86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	695b      	ldr	r3, [r3, #20]
 8000c92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	69db      	ldr	r3, [r3, #28]
 8000c9e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ca0:	68fa      	ldr	r2, [r7, #12]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	68fa      	ldr	r2, [r7, #12]
 8000cac:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3714      	adds	r7, #20
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr
 8000cd0:	bffdfff8 	.word	0xbffdfff8
 8000cd4:	cccccccd 	.word	0xcccccccd
 8000cd8:	40020000 	.word	0x40020000

08000cdc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
 8000ce8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000cea:	2300      	movs	r3, #0
 8000cec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d101      	bne.n	8000cfc <HAL_DMA_Start_IT+0x20>
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	e04b      	b.n	8000d94 <HAL_DMA_Start_IT+0xb8>
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	2201      	movs	r2, #1
 8000d00:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d13a      	bne.n	8000d86 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	2202      	movs	r2, #2
 8000d14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f022 0201 	bic.w	r2, r2, #1
 8000d2c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	68b9      	ldr	r1, [r7, #8]
 8000d34:	68f8      	ldr	r0, [r7, #12]
 8000d36:	f000 f9eb 	bl	8001110 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d008      	beq.n	8000d54 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f042 020e 	orr.w	r2, r2, #14
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	e00f      	b.n	8000d74 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f022 0204 	bic.w	r2, r2, #4
 8000d62:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f042 020a 	orr.w	r2, r2, #10
 8000d72:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f042 0201 	orr.w	r2, r2, #1
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	e005      	b.n	8000d92 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000d92:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3718      	adds	r7, #24
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000da4:	2300      	movs	r3, #0
 8000da6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	2b02      	cmp	r3, #2
 8000db2:	d008      	beq.n	8000dc6 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2204      	movs	r2, #4
 8000db8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e020      	b.n	8000e08 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f022 020e 	bic.w	r2, r2, #14
 8000dd4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f022 0201 	bic.w	r2, r2, #1
 8000de4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dee:	2101      	movs	r1, #1
 8000df0:	fa01 f202 	lsl.w	r2, r1, r2
 8000df4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2201      	movs	r2, #1
 8000dfa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2200      	movs	r2, #0
 8000e02:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3714      	adds	r7, #20
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bc80      	pop	{r7}
 8000e10:	4770      	bx	lr
	...

08000e14 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	d005      	beq.n	8000e38 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2204      	movs	r2, #4
 8000e30:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	73fb      	strb	r3, [r7, #15]
 8000e36:	e051      	b.n	8000edc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f022 020e 	bic.w	r2, r2, #14
 8000e46:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f022 0201 	bic.w	r2, r2, #1
 8000e56:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a22      	ldr	r2, [pc, #136]	; (8000ee8 <HAL_DMA_Abort_IT+0xd4>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d029      	beq.n	8000eb6 <HAL_DMA_Abort_IT+0xa2>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a21      	ldr	r2, [pc, #132]	; (8000eec <HAL_DMA_Abort_IT+0xd8>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d022      	beq.n	8000eb2 <HAL_DMA_Abort_IT+0x9e>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a1f      	ldr	r2, [pc, #124]	; (8000ef0 <HAL_DMA_Abort_IT+0xdc>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d01a      	beq.n	8000eac <HAL_DMA_Abort_IT+0x98>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a1e      	ldr	r2, [pc, #120]	; (8000ef4 <HAL_DMA_Abort_IT+0xe0>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d012      	beq.n	8000ea6 <HAL_DMA_Abort_IT+0x92>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a1c      	ldr	r2, [pc, #112]	; (8000ef8 <HAL_DMA_Abort_IT+0xe4>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d00a      	beq.n	8000ea0 <HAL_DMA_Abort_IT+0x8c>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a1b      	ldr	r2, [pc, #108]	; (8000efc <HAL_DMA_Abort_IT+0xe8>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d102      	bne.n	8000e9a <HAL_DMA_Abort_IT+0x86>
 8000e94:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e98:	e00e      	b.n	8000eb8 <HAL_DMA_Abort_IT+0xa4>
 8000e9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e9e:	e00b      	b.n	8000eb8 <HAL_DMA_Abort_IT+0xa4>
 8000ea0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ea4:	e008      	b.n	8000eb8 <HAL_DMA_Abort_IT+0xa4>
 8000ea6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eaa:	e005      	b.n	8000eb8 <HAL_DMA_Abort_IT+0xa4>
 8000eac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eb0:	e002      	b.n	8000eb8 <HAL_DMA_Abort_IT+0xa4>
 8000eb2:	2310      	movs	r3, #16
 8000eb4:	e000      	b.n	8000eb8 <HAL_DMA_Abort_IT+0xa4>
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	4a11      	ldr	r2, [pc, #68]	; (8000f00 <HAL_DMA_Abort_IT+0xec>)
 8000eba:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d003      	beq.n	8000edc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	4798      	blx	r3
    } 
  }
  return status;
 8000edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40020008 	.word	0x40020008
 8000eec:	4002001c 	.word	0x4002001c
 8000ef0:	40020030 	.word	0x40020030
 8000ef4:	40020044 	.word	0x40020044
 8000ef8:	40020058 	.word	0x40020058
 8000efc:	4002006c 	.word	0x4002006c
 8000f00:	40020000 	.word	0x40020000

08000f04 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f20:	2204      	movs	r2, #4
 8000f22:	409a      	lsls	r2, r3
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	4013      	ands	r3, r2
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d04f      	beq.n	8000fcc <HAL_DMA_IRQHandler+0xc8>
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	f003 0304 	and.w	r3, r3, #4
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d04a      	beq.n	8000fcc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f003 0320 	and.w	r3, r3, #32
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d107      	bne.n	8000f54 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f022 0204 	bic.w	r2, r2, #4
 8000f52:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a66      	ldr	r2, [pc, #408]	; (80010f4 <HAL_DMA_IRQHandler+0x1f0>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d029      	beq.n	8000fb2 <HAL_DMA_IRQHandler+0xae>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a65      	ldr	r2, [pc, #404]	; (80010f8 <HAL_DMA_IRQHandler+0x1f4>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d022      	beq.n	8000fae <HAL_DMA_IRQHandler+0xaa>
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a63      	ldr	r2, [pc, #396]	; (80010fc <HAL_DMA_IRQHandler+0x1f8>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d01a      	beq.n	8000fa8 <HAL_DMA_IRQHandler+0xa4>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a62      	ldr	r2, [pc, #392]	; (8001100 <HAL_DMA_IRQHandler+0x1fc>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d012      	beq.n	8000fa2 <HAL_DMA_IRQHandler+0x9e>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a60      	ldr	r2, [pc, #384]	; (8001104 <HAL_DMA_IRQHandler+0x200>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d00a      	beq.n	8000f9c <HAL_DMA_IRQHandler+0x98>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a5f      	ldr	r2, [pc, #380]	; (8001108 <HAL_DMA_IRQHandler+0x204>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d102      	bne.n	8000f96 <HAL_DMA_IRQHandler+0x92>
 8000f90:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f94:	e00e      	b.n	8000fb4 <HAL_DMA_IRQHandler+0xb0>
 8000f96:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000f9a:	e00b      	b.n	8000fb4 <HAL_DMA_IRQHandler+0xb0>
 8000f9c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000fa0:	e008      	b.n	8000fb4 <HAL_DMA_IRQHandler+0xb0>
 8000fa2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fa6:	e005      	b.n	8000fb4 <HAL_DMA_IRQHandler+0xb0>
 8000fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fac:	e002      	b.n	8000fb4 <HAL_DMA_IRQHandler+0xb0>
 8000fae:	2340      	movs	r3, #64	; 0x40
 8000fb0:	e000      	b.n	8000fb4 <HAL_DMA_IRQHandler+0xb0>
 8000fb2:	2304      	movs	r3, #4
 8000fb4:	4a55      	ldr	r2, [pc, #340]	; (800110c <HAL_DMA_IRQHandler+0x208>)
 8000fb6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	f000 8094 	beq.w	80010ea <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000fca:	e08e      	b.n	80010ea <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd0:	2202      	movs	r2, #2
 8000fd2:	409a      	lsls	r2, r3
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d056      	beq.n	800108a <HAL_DMA_IRQHandler+0x186>
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	f003 0302 	and.w	r3, r3, #2
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d051      	beq.n	800108a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f003 0320 	and.w	r3, r3, #32
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d10b      	bne.n	800100c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f022 020a 	bic.w	r2, r2, #10
 8001002:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2201      	movs	r2, #1
 8001008:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a38      	ldr	r2, [pc, #224]	; (80010f4 <HAL_DMA_IRQHandler+0x1f0>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d029      	beq.n	800106a <HAL_DMA_IRQHandler+0x166>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a37      	ldr	r2, [pc, #220]	; (80010f8 <HAL_DMA_IRQHandler+0x1f4>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d022      	beq.n	8001066 <HAL_DMA_IRQHandler+0x162>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a35      	ldr	r2, [pc, #212]	; (80010fc <HAL_DMA_IRQHandler+0x1f8>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d01a      	beq.n	8001060 <HAL_DMA_IRQHandler+0x15c>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a34      	ldr	r2, [pc, #208]	; (8001100 <HAL_DMA_IRQHandler+0x1fc>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d012      	beq.n	800105a <HAL_DMA_IRQHandler+0x156>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a32      	ldr	r2, [pc, #200]	; (8001104 <HAL_DMA_IRQHandler+0x200>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d00a      	beq.n	8001054 <HAL_DMA_IRQHandler+0x150>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a31      	ldr	r2, [pc, #196]	; (8001108 <HAL_DMA_IRQHandler+0x204>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d102      	bne.n	800104e <HAL_DMA_IRQHandler+0x14a>
 8001048:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800104c:	e00e      	b.n	800106c <HAL_DMA_IRQHandler+0x168>
 800104e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001052:	e00b      	b.n	800106c <HAL_DMA_IRQHandler+0x168>
 8001054:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001058:	e008      	b.n	800106c <HAL_DMA_IRQHandler+0x168>
 800105a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800105e:	e005      	b.n	800106c <HAL_DMA_IRQHandler+0x168>
 8001060:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001064:	e002      	b.n	800106c <HAL_DMA_IRQHandler+0x168>
 8001066:	2320      	movs	r3, #32
 8001068:	e000      	b.n	800106c <HAL_DMA_IRQHandler+0x168>
 800106a:	2302      	movs	r3, #2
 800106c:	4a27      	ldr	r2, [pc, #156]	; (800110c <HAL_DMA_IRQHandler+0x208>)
 800106e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2200      	movs	r2, #0
 8001074:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800107c:	2b00      	cmp	r3, #0
 800107e:	d034      	beq.n	80010ea <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001088:	e02f      	b.n	80010ea <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108e:	2208      	movs	r2, #8
 8001090:	409a      	lsls	r2, r3
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	4013      	ands	r3, r2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d028      	beq.n	80010ec <HAL_DMA_IRQHandler+0x1e8>
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	f003 0308 	and.w	r3, r3, #8
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d023      	beq.n	80010ec <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f022 020e 	bic.w	r2, r2, #14
 80010b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010bc:	2101      	movs	r1, #1
 80010be:	fa01 f202 	lsl.w	r2, r1, r2
 80010c2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2201      	movs	r2, #1
 80010c8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2201      	movs	r2, #1
 80010ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d004      	beq.n	80010ec <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	4798      	blx	r3
    }
  }
  return;
 80010ea:	bf00      	nop
 80010ec:	bf00      	nop
}
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40020008 	.word	0x40020008
 80010f8:	4002001c 	.word	0x4002001c
 80010fc:	40020030 	.word	0x40020030
 8001100:	40020044 	.word	0x40020044
 8001104:	40020058 	.word	0x40020058
 8001108:	4002006c 	.word	0x4002006c
 800110c:	40020000 	.word	0x40020000

08001110 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
 800111c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001126:	2101      	movs	r1, #1
 8001128:	fa01 f202 	lsl.w	r2, r1, r2
 800112c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	683a      	ldr	r2, [r7, #0]
 8001134:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	2b10      	cmp	r3, #16
 800113c:	d108      	bne.n	8001150 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	68ba      	ldr	r2, [r7, #8]
 800114c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800114e:	e007      	b.n	8001160 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	68ba      	ldr	r2, [r7, #8]
 8001156:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	60da      	str	r2, [r3, #12]
}
 8001160:	bf00      	nop
 8001162:	3714      	adds	r7, #20
 8001164:	46bd      	mov	sp, r7
 8001166:	bc80      	pop	{r7}
 8001168:	4770      	bx	lr
	...

0800116c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800116c:	b480      	push	{r7}
 800116e:	b08b      	sub	sp, #44	; 0x2c
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001176:	2300      	movs	r3, #0
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800117a:	2300      	movs	r3, #0
 800117c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800117e:	e169      	b.n	8001454 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001180:	2201      	movs	r2, #1
 8001182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	69fa      	ldr	r2, [r7, #28]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	429a      	cmp	r2, r3
 800119a:	f040 8158 	bne.w	800144e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	4a9a      	ldr	r2, [pc, #616]	; (800140c <HAL_GPIO_Init+0x2a0>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d05e      	beq.n	8001266 <HAL_GPIO_Init+0xfa>
 80011a8:	4a98      	ldr	r2, [pc, #608]	; (800140c <HAL_GPIO_Init+0x2a0>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d875      	bhi.n	800129a <HAL_GPIO_Init+0x12e>
 80011ae:	4a98      	ldr	r2, [pc, #608]	; (8001410 <HAL_GPIO_Init+0x2a4>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d058      	beq.n	8001266 <HAL_GPIO_Init+0xfa>
 80011b4:	4a96      	ldr	r2, [pc, #600]	; (8001410 <HAL_GPIO_Init+0x2a4>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d86f      	bhi.n	800129a <HAL_GPIO_Init+0x12e>
 80011ba:	4a96      	ldr	r2, [pc, #600]	; (8001414 <HAL_GPIO_Init+0x2a8>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d052      	beq.n	8001266 <HAL_GPIO_Init+0xfa>
 80011c0:	4a94      	ldr	r2, [pc, #592]	; (8001414 <HAL_GPIO_Init+0x2a8>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d869      	bhi.n	800129a <HAL_GPIO_Init+0x12e>
 80011c6:	4a94      	ldr	r2, [pc, #592]	; (8001418 <HAL_GPIO_Init+0x2ac>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d04c      	beq.n	8001266 <HAL_GPIO_Init+0xfa>
 80011cc:	4a92      	ldr	r2, [pc, #584]	; (8001418 <HAL_GPIO_Init+0x2ac>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d863      	bhi.n	800129a <HAL_GPIO_Init+0x12e>
 80011d2:	4a92      	ldr	r2, [pc, #584]	; (800141c <HAL_GPIO_Init+0x2b0>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d046      	beq.n	8001266 <HAL_GPIO_Init+0xfa>
 80011d8:	4a90      	ldr	r2, [pc, #576]	; (800141c <HAL_GPIO_Init+0x2b0>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d85d      	bhi.n	800129a <HAL_GPIO_Init+0x12e>
 80011de:	2b12      	cmp	r3, #18
 80011e0:	d82a      	bhi.n	8001238 <HAL_GPIO_Init+0xcc>
 80011e2:	2b12      	cmp	r3, #18
 80011e4:	d859      	bhi.n	800129a <HAL_GPIO_Init+0x12e>
 80011e6:	a201      	add	r2, pc, #4	; (adr r2, 80011ec <HAL_GPIO_Init+0x80>)
 80011e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ec:	08001267 	.word	0x08001267
 80011f0:	08001241 	.word	0x08001241
 80011f4:	08001253 	.word	0x08001253
 80011f8:	08001295 	.word	0x08001295
 80011fc:	0800129b 	.word	0x0800129b
 8001200:	0800129b 	.word	0x0800129b
 8001204:	0800129b 	.word	0x0800129b
 8001208:	0800129b 	.word	0x0800129b
 800120c:	0800129b 	.word	0x0800129b
 8001210:	0800129b 	.word	0x0800129b
 8001214:	0800129b 	.word	0x0800129b
 8001218:	0800129b 	.word	0x0800129b
 800121c:	0800129b 	.word	0x0800129b
 8001220:	0800129b 	.word	0x0800129b
 8001224:	0800129b 	.word	0x0800129b
 8001228:	0800129b 	.word	0x0800129b
 800122c:	0800129b 	.word	0x0800129b
 8001230:	08001249 	.word	0x08001249
 8001234:	0800125d 	.word	0x0800125d
 8001238:	4a79      	ldr	r2, [pc, #484]	; (8001420 <HAL_GPIO_Init+0x2b4>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d013      	beq.n	8001266 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800123e:	e02c      	b.n	800129a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	623b      	str	r3, [r7, #32]
          break;
 8001246:	e029      	b.n	800129c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	3304      	adds	r3, #4
 800124e:	623b      	str	r3, [r7, #32]
          break;
 8001250:	e024      	b.n	800129c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	3308      	adds	r3, #8
 8001258:	623b      	str	r3, [r7, #32]
          break;
 800125a:	e01f      	b.n	800129c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	330c      	adds	r3, #12
 8001262:	623b      	str	r3, [r7, #32]
          break;
 8001264:	e01a      	b.n	800129c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d102      	bne.n	8001274 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800126e:	2304      	movs	r3, #4
 8001270:	623b      	str	r3, [r7, #32]
          break;
 8001272:	e013      	b.n	800129c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d105      	bne.n	8001288 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800127c:	2308      	movs	r3, #8
 800127e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	69fa      	ldr	r2, [r7, #28]
 8001284:	611a      	str	r2, [r3, #16]
          break;
 8001286:	e009      	b.n	800129c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001288:	2308      	movs	r3, #8
 800128a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	69fa      	ldr	r2, [r7, #28]
 8001290:	615a      	str	r2, [r3, #20]
          break;
 8001292:	e003      	b.n	800129c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001294:	2300      	movs	r3, #0
 8001296:	623b      	str	r3, [r7, #32]
          break;
 8001298:	e000      	b.n	800129c <HAL_GPIO_Init+0x130>
          break;
 800129a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	2bff      	cmp	r3, #255	; 0xff
 80012a0:	d801      	bhi.n	80012a6 <HAL_GPIO_Init+0x13a>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	e001      	b.n	80012aa <HAL_GPIO_Init+0x13e>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	3304      	adds	r3, #4
 80012aa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	2bff      	cmp	r3, #255	; 0xff
 80012b0:	d802      	bhi.n	80012b8 <HAL_GPIO_Init+0x14c>
 80012b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	e002      	b.n	80012be <HAL_GPIO_Init+0x152>
 80012b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ba:	3b08      	subs	r3, #8
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	210f      	movs	r1, #15
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	fa01 f303 	lsl.w	r3, r1, r3
 80012cc:	43db      	mvns	r3, r3
 80012ce:	401a      	ands	r2, r3
 80012d0:	6a39      	ldr	r1, [r7, #32]
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	fa01 f303 	lsl.w	r3, r1, r3
 80012d8:	431a      	orrs	r2, r3
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f000 80b1 	beq.w	800144e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012ec:	4b4d      	ldr	r3, [pc, #308]	; (8001424 <HAL_GPIO_Init+0x2b8>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	4a4c      	ldr	r2, [pc, #304]	; (8001424 <HAL_GPIO_Init+0x2b8>)
 80012f2:	f043 0301 	orr.w	r3, r3, #1
 80012f6:	6193      	str	r3, [r2, #24]
 80012f8:	4b4a      	ldr	r3, [pc, #296]	; (8001424 <HAL_GPIO_Init+0x2b8>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	f003 0301 	and.w	r3, r3, #1
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001304:	4a48      	ldr	r2, [pc, #288]	; (8001428 <HAL_GPIO_Init+0x2bc>)
 8001306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001308:	089b      	lsrs	r3, r3, #2
 800130a:	3302      	adds	r3, #2
 800130c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001310:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001314:	f003 0303 	and.w	r3, r3, #3
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	220f      	movs	r2, #15
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	43db      	mvns	r3, r3
 8001322:	68fa      	ldr	r2, [r7, #12]
 8001324:	4013      	ands	r3, r2
 8001326:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4a40      	ldr	r2, [pc, #256]	; (800142c <HAL_GPIO_Init+0x2c0>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d013      	beq.n	8001358 <HAL_GPIO_Init+0x1ec>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4a3f      	ldr	r2, [pc, #252]	; (8001430 <HAL_GPIO_Init+0x2c4>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d00d      	beq.n	8001354 <HAL_GPIO_Init+0x1e8>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4a3e      	ldr	r2, [pc, #248]	; (8001434 <HAL_GPIO_Init+0x2c8>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d007      	beq.n	8001350 <HAL_GPIO_Init+0x1e4>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4a3d      	ldr	r2, [pc, #244]	; (8001438 <HAL_GPIO_Init+0x2cc>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d101      	bne.n	800134c <HAL_GPIO_Init+0x1e0>
 8001348:	2303      	movs	r3, #3
 800134a:	e006      	b.n	800135a <HAL_GPIO_Init+0x1ee>
 800134c:	2304      	movs	r3, #4
 800134e:	e004      	b.n	800135a <HAL_GPIO_Init+0x1ee>
 8001350:	2302      	movs	r3, #2
 8001352:	e002      	b.n	800135a <HAL_GPIO_Init+0x1ee>
 8001354:	2301      	movs	r3, #1
 8001356:	e000      	b.n	800135a <HAL_GPIO_Init+0x1ee>
 8001358:	2300      	movs	r3, #0
 800135a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800135c:	f002 0203 	and.w	r2, r2, #3
 8001360:	0092      	lsls	r2, r2, #2
 8001362:	4093      	lsls	r3, r2
 8001364:	68fa      	ldr	r2, [r7, #12]
 8001366:	4313      	orrs	r3, r2
 8001368:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800136a:	492f      	ldr	r1, [pc, #188]	; (8001428 <HAL_GPIO_Init+0x2bc>)
 800136c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136e:	089b      	lsrs	r3, r3, #2
 8001370:	3302      	adds	r3, #2
 8001372:	68fa      	ldr	r2, [r7, #12]
 8001374:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d006      	beq.n	8001392 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001384:	4b2d      	ldr	r3, [pc, #180]	; (800143c <HAL_GPIO_Init+0x2d0>)
 8001386:	689a      	ldr	r2, [r3, #8]
 8001388:	492c      	ldr	r1, [pc, #176]	; (800143c <HAL_GPIO_Init+0x2d0>)
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	4313      	orrs	r3, r2
 800138e:	608b      	str	r3, [r1, #8]
 8001390:	e006      	b.n	80013a0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001392:	4b2a      	ldr	r3, [pc, #168]	; (800143c <HAL_GPIO_Init+0x2d0>)
 8001394:	689a      	ldr	r2, [r3, #8]
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	43db      	mvns	r3, r3
 800139a:	4928      	ldr	r1, [pc, #160]	; (800143c <HAL_GPIO_Init+0x2d0>)
 800139c:	4013      	ands	r3, r2
 800139e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d006      	beq.n	80013ba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013ac:	4b23      	ldr	r3, [pc, #140]	; (800143c <HAL_GPIO_Init+0x2d0>)
 80013ae:	68da      	ldr	r2, [r3, #12]
 80013b0:	4922      	ldr	r1, [pc, #136]	; (800143c <HAL_GPIO_Init+0x2d0>)
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	60cb      	str	r3, [r1, #12]
 80013b8:	e006      	b.n	80013c8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013ba:	4b20      	ldr	r3, [pc, #128]	; (800143c <HAL_GPIO_Init+0x2d0>)
 80013bc:	68da      	ldr	r2, [r3, #12]
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	43db      	mvns	r3, r3
 80013c2:	491e      	ldr	r1, [pc, #120]	; (800143c <HAL_GPIO_Init+0x2d0>)
 80013c4:	4013      	ands	r3, r2
 80013c6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d006      	beq.n	80013e2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013d4:	4b19      	ldr	r3, [pc, #100]	; (800143c <HAL_GPIO_Init+0x2d0>)
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	4918      	ldr	r1, [pc, #96]	; (800143c <HAL_GPIO_Init+0x2d0>)
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	4313      	orrs	r3, r2
 80013de:	604b      	str	r3, [r1, #4]
 80013e0:	e006      	b.n	80013f0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013e2:	4b16      	ldr	r3, [pc, #88]	; (800143c <HAL_GPIO_Init+0x2d0>)
 80013e4:	685a      	ldr	r2, [r3, #4]
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	43db      	mvns	r3, r3
 80013ea:	4914      	ldr	r1, [pc, #80]	; (800143c <HAL_GPIO_Init+0x2d0>)
 80013ec:	4013      	ands	r3, r2
 80013ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d021      	beq.n	8001440 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013fc:	4b0f      	ldr	r3, [pc, #60]	; (800143c <HAL_GPIO_Init+0x2d0>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	490e      	ldr	r1, [pc, #56]	; (800143c <HAL_GPIO_Init+0x2d0>)
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	4313      	orrs	r3, r2
 8001406:	600b      	str	r3, [r1, #0]
 8001408:	e021      	b.n	800144e <HAL_GPIO_Init+0x2e2>
 800140a:	bf00      	nop
 800140c:	10320000 	.word	0x10320000
 8001410:	10310000 	.word	0x10310000
 8001414:	10220000 	.word	0x10220000
 8001418:	10210000 	.word	0x10210000
 800141c:	10120000 	.word	0x10120000
 8001420:	10110000 	.word	0x10110000
 8001424:	40021000 	.word	0x40021000
 8001428:	40010000 	.word	0x40010000
 800142c:	40010800 	.word	0x40010800
 8001430:	40010c00 	.word	0x40010c00
 8001434:	40011000 	.word	0x40011000
 8001438:	40011400 	.word	0x40011400
 800143c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001440:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <HAL_GPIO_Init+0x304>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	43db      	mvns	r3, r3
 8001448:	4909      	ldr	r1, [pc, #36]	; (8001470 <HAL_GPIO_Init+0x304>)
 800144a:	4013      	ands	r3, r2
 800144c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800144e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001450:	3301      	adds	r3, #1
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145a:	fa22 f303 	lsr.w	r3, r2, r3
 800145e:	2b00      	cmp	r3, #0
 8001460:	f47f ae8e 	bne.w	8001180 <HAL_GPIO_Init+0x14>
  }
}
 8001464:	bf00      	nop
 8001466:	bf00      	nop
 8001468:	372c      	adds	r7, #44	; 0x2c
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr
 8001470:	40010400 	.word	0x40010400

08001474 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	460b      	mov	r3, r1
 800147e:	807b      	strh	r3, [r7, #2]
 8001480:	4613      	mov	r3, r2
 8001482:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001484:	787b      	ldrb	r3, [r7, #1]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d003      	beq.n	8001492 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800148a:	887a      	ldrh	r2, [r7, #2]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001490:	e003      	b.n	800149a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001492:	887b      	ldrh	r3, [r7, #2]
 8001494:	041a      	lsls	r2, r3, #16
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	611a      	str	r2, [r3, #16]
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr

080014a4 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80014aa:	f7ff fa81 	bl	80009b0 <HAL_GetTick>
 80014ae:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80014b0:	4b45      	ldr	r3, [pc, #276]	; (80015c8 <HAL_RCC_DeInit+0x124>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a44      	ldr	r2, [pc, #272]	; (80015c8 <HAL_RCC_DeInit+0x124>)
 80014b6:	f043 0301 	orr.w	r3, r3, #1
 80014ba:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80014bc:	e008      	b.n	80014d0 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014be:	f7ff fa77 	bl	80009b0 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d901      	bls.n	80014d0 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e077      	b.n	80015c0 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80014d0:	4b3d      	ldr	r3, [pc, #244]	; (80015c8 <HAL_RCC_DeInit+0x124>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d0f0      	beq.n	80014be <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM bits to the reset value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 80014dc:	4b3a      	ldr	r3, [pc, #232]	; (80015c8 <HAL_RCC_DeInit+0x124>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80014e4:	4a38      	ldr	r2, [pc, #224]	; (80015c8 <HAL_RCC_DeInit+0x124>)
 80014e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014ea:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80014ec:	f7ff fa60 	bl	80009b0 <HAL_GetTick>
 80014f0:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80014f2:	4b35      	ldr	r3, [pc, #212]	; (80015c8 <HAL_RCC_DeInit+0x124>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	605a      	str	r2, [r3, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80014f8:	e00a      	b.n	8001510 <HAL_RCC_DeInit+0x6c>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014fa:	f7ff fa59 	bl	80009b0 <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	f241 3288 	movw	r2, #5000	; 0x1388
 8001508:	4293      	cmp	r3, r2
 800150a:	d901      	bls.n	8001510 <HAL_RCC_DeInit+0x6c>
    {
      return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e057      	b.n	80015c0 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8001510:	4b2d      	ldr	r3, [pc, #180]	; (80015c8 <HAL_RCC_DeInit+0x124>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f003 030c 	and.w	r3, r3, #12
 8001518:	2b00      	cmp	r3, #0
 800151a:	d1ee      	bne.n	80014fa <HAL_RCC_DeInit+0x56>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 800151c:	4b2b      	ldr	r3, [pc, #172]	; (80015cc <HAL_RCC_DeInit+0x128>)
 800151e:	4a2c      	ldr	r2, [pc, #176]	; (80015d0 <HAL_RCC_DeInit+0x12c>)
 8001520:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001522:	4b2c      	ldr	r3, [pc, #176]	; (80015d4 <HAL_RCC_DeInit+0x130>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff fa00 	bl	800092c <HAL_InitTick>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <HAL_RCC_DeInit+0x92>
  {
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e044      	b.n	80015c0 <HAL_RCC_DeInit+0x11c>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001536:	f7ff fa3b 	bl	80009b0 <HAL_GetTick>
 800153a:	6078      	str	r0, [r7, #4]

  /* Second step is to clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800153c:	4b22      	ldr	r3, [pc, #136]	; (80015c8 <HAL_RCC_DeInit+0x124>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a21      	ldr	r2, [pc, #132]	; (80015c8 <HAL_RCC_DeInit+0x124>)
 8001542:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001546:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001548:	e008      	b.n	800155c <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800154a:	f7ff fa31 	bl	80009b0 <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b02      	cmp	r3, #2
 8001556:	d901      	bls.n	800155c <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e031      	b.n	80015c0 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800155c:	4b1a      	ldr	r3, [pc, #104]	; (80015c8 <HAL_RCC_DeInit+0x124>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d1f0      	bne.n	800154a <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Ensure to reset PLLSRC and PLLMUL bits */
  CLEAR_REG(RCC->CFGR);
 8001568:	4b17      	ldr	r3, [pc, #92]	; (80015c8 <HAL_RCC_DeInit+0x124>)
 800156a:	2200      	movs	r2, #0
 800156c:	605a      	str	r2, [r3, #4]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800156e:	f7ff fa1f 	bl	80009b0 <HAL_GetTick>
 8001572:	6078      	str	r0, [r7, #4]

  /* Reset HSEON & CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 8001574:	4b14      	ldr	r3, [pc, #80]	; (80015c8 <HAL_RCC_DeInit+0x124>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a13      	ldr	r2, [pc, #76]	; (80015c8 <HAL_RCC_DeInit+0x124>)
 800157a:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800157e:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001580:	e008      	b.n	8001594 <HAL_RCC_DeInit+0xf0>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001582:	f7ff fa15 	bl	80009b0 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b64      	cmp	r3, #100	; 0x64
 800158e:	d901      	bls.n	8001594 <HAL_RCC_DeInit+0xf0>
    {
      return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e015      	b.n	80015c0 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <HAL_RCC_DeInit+0x124>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d1f0      	bne.n	8001582 <HAL_RCC_DeInit+0xde>
    }
  }

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 80015a0:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <HAL_RCC_DeInit+0x124>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a08      	ldr	r2, [pc, #32]	; (80015c8 <HAL_RCC_DeInit+0x124>)
 80015a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015aa:	6013      	str	r3, [r2, #0]
  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
#endif /* RCC_CFGR2_PREDIV1 */

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <HAL_RCC_DeInit+0x124>)
 80015ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b0:	4a05      	ldr	r2, [pc, #20]	; (80015c8 <HAL_RCC_DeInit+0x124>)
 80015b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015b6:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 80015b8:	4b03      	ldr	r3, [pc, #12]	; (80015c8 <HAL_RCC_DeInit+0x124>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40021000 	.word	0x40021000
 80015cc:	20000000 	.word	0x20000000
 80015d0:	007a1200 	.word	0x007a1200
 80015d4:	20000004 	.word	0x20000004

080015d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d101      	bne.n	80015ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e272      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	f000 8087 	beq.w	8001706 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015f8:	4b92      	ldr	r3, [pc, #584]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f003 030c 	and.w	r3, r3, #12
 8001600:	2b04      	cmp	r3, #4
 8001602:	d00c      	beq.n	800161e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001604:	4b8f      	ldr	r3, [pc, #572]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f003 030c 	and.w	r3, r3, #12
 800160c:	2b08      	cmp	r3, #8
 800160e:	d112      	bne.n	8001636 <HAL_RCC_OscConfig+0x5e>
 8001610:	4b8c      	ldr	r3, [pc, #560]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800161c:	d10b      	bne.n	8001636 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800161e:	4b89      	ldr	r3, [pc, #548]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d06c      	beq.n	8001704 <HAL_RCC_OscConfig+0x12c>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d168      	bne.n	8001704 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e24c      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800163e:	d106      	bne.n	800164e <HAL_RCC_OscConfig+0x76>
 8001640:	4b80      	ldr	r3, [pc, #512]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a7f      	ldr	r2, [pc, #508]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 8001646:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800164a:	6013      	str	r3, [r2, #0]
 800164c:	e02e      	b.n	80016ac <HAL_RCC_OscConfig+0xd4>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d10c      	bne.n	8001670 <HAL_RCC_OscConfig+0x98>
 8001656:	4b7b      	ldr	r3, [pc, #492]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a7a      	ldr	r2, [pc, #488]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 800165c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001660:	6013      	str	r3, [r2, #0]
 8001662:	4b78      	ldr	r3, [pc, #480]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a77      	ldr	r2, [pc, #476]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 8001668:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800166c:	6013      	str	r3, [r2, #0]
 800166e:	e01d      	b.n	80016ac <HAL_RCC_OscConfig+0xd4>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001678:	d10c      	bne.n	8001694 <HAL_RCC_OscConfig+0xbc>
 800167a:	4b72      	ldr	r3, [pc, #456]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a71      	ldr	r2, [pc, #452]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 8001680:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	4b6f      	ldr	r3, [pc, #444]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a6e      	ldr	r2, [pc, #440]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 800168c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001690:	6013      	str	r3, [r2, #0]
 8001692:	e00b      	b.n	80016ac <HAL_RCC_OscConfig+0xd4>
 8001694:	4b6b      	ldr	r3, [pc, #428]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a6a      	ldr	r2, [pc, #424]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 800169a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800169e:	6013      	str	r3, [r2, #0]
 80016a0:	4b68      	ldr	r3, [pc, #416]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a67      	ldr	r2, [pc, #412]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 80016a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d013      	beq.n	80016dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b4:	f7ff f97c 	bl	80009b0 <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016bc:	f7ff f978 	bl	80009b0 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b64      	cmp	r3, #100	; 0x64
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e200      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ce:	4b5d      	ldr	r3, [pc, #372]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d0f0      	beq.n	80016bc <HAL_RCC_OscConfig+0xe4>
 80016da:	e014      	b.n	8001706 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016dc:	f7ff f968 	bl	80009b0 <HAL_GetTick>
 80016e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016e2:	e008      	b.n	80016f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016e4:	f7ff f964 	bl	80009b0 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b64      	cmp	r3, #100	; 0x64
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e1ec      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016f6:	4b53      	ldr	r3, [pc, #332]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1f0      	bne.n	80016e4 <HAL_RCC_OscConfig+0x10c>
 8001702:	e000      	b.n	8001706 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001704:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d063      	beq.n	80017da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001712:	4b4c      	ldr	r3, [pc, #304]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f003 030c 	and.w	r3, r3, #12
 800171a:	2b00      	cmp	r3, #0
 800171c:	d00b      	beq.n	8001736 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800171e:	4b49      	ldr	r3, [pc, #292]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f003 030c 	and.w	r3, r3, #12
 8001726:	2b08      	cmp	r3, #8
 8001728:	d11c      	bne.n	8001764 <HAL_RCC_OscConfig+0x18c>
 800172a:	4b46      	ldr	r3, [pc, #280]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d116      	bne.n	8001764 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001736:	4b43      	ldr	r3, [pc, #268]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d005      	beq.n	800174e <HAL_RCC_OscConfig+0x176>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d001      	beq.n	800174e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e1c0      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800174e:	4b3d      	ldr	r3, [pc, #244]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	695b      	ldr	r3, [r3, #20]
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	4939      	ldr	r1, [pc, #228]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 800175e:	4313      	orrs	r3, r2
 8001760:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001762:	e03a      	b.n	80017da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	691b      	ldr	r3, [r3, #16]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d020      	beq.n	80017ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800176c:	4b36      	ldr	r3, [pc, #216]	; (8001848 <HAL_RCC_OscConfig+0x270>)
 800176e:	2201      	movs	r2, #1
 8001770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001772:	f7ff f91d 	bl	80009b0 <HAL_GetTick>
 8001776:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001778:	e008      	b.n	800178c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800177a:	f7ff f919 	bl	80009b0 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e1a1      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800178c:	4b2d      	ldr	r3, [pc, #180]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0302 	and.w	r3, r3, #2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d0f0      	beq.n	800177a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001798:	4b2a      	ldr	r3, [pc, #168]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	695b      	ldr	r3, [r3, #20]
 80017a4:	00db      	lsls	r3, r3, #3
 80017a6:	4927      	ldr	r1, [pc, #156]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 80017a8:	4313      	orrs	r3, r2
 80017aa:	600b      	str	r3, [r1, #0]
 80017ac:	e015      	b.n	80017da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017ae:	4b26      	ldr	r3, [pc, #152]	; (8001848 <HAL_RCC_OscConfig+0x270>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b4:	f7ff f8fc 	bl	80009b0 <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017bc:	f7ff f8f8 	bl	80009b0 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e180      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ce:	4b1d      	ldr	r3, [pc, #116]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1f0      	bne.n	80017bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0308 	and.w	r3, r3, #8
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d03a      	beq.n	800185c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d019      	beq.n	8001822 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ee:	4b17      	ldr	r3, [pc, #92]	; (800184c <HAL_RCC_OscConfig+0x274>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017f4:	f7ff f8dc 	bl	80009b0 <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017fc:	f7ff f8d8 	bl	80009b0 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e160      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800180e:	4b0d      	ldr	r3, [pc, #52]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 8001810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d0f0      	beq.n	80017fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800181a:	2001      	movs	r0, #1
 800181c:	f000 face 	bl	8001dbc <RCC_Delay>
 8001820:	e01c      	b.n	800185c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001822:	4b0a      	ldr	r3, [pc, #40]	; (800184c <HAL_RCC_OscConfig+0x274>)
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001828:	f7ff f8c2 	bl	80009b0 <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800182e:	e00f      	b.n	8001850 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001830:	f7ff f8be 	bl	80009b0 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d908      	bls.n	8001850 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e146      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4f8>
 8001842:	bf00      	nop
 8001844:	40021000 	.word	0x40021000
 8001848:	42420000 	.word	0x42420000
 800184c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001850:	4b92      	ldr	r3, [pc, #584]	; (8001a9c <HAL_RCC_OscConfig+0x4c4>)
 8001852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d1e9      	bne.n	8001830 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0304 	and.w	r3, r3, #4
 8001864:	2b00      	cmp	r3, #0
 8001866:	f000 80a6 	beq.w	80019b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800186a:	2300      	movs	r3, #0
 800186c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800186e:	4b8b      	ldr	r3, [pc, #556]	; (8001a9c <HAL_RCC_OscConfig+0x4c4>)
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d10d      	bne.n	8001896 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800187a:	4b88      	ldr	r3, [pc, #544]	; (8001a9c <HAL_RCC_OscConfig+0x4c4>)
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	4a87      	ldr	r2, [pc, #540]	; (8001a9c <HAL_RCC_OscConfig+0x4c4>)
 8001880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001884:	61d3      	str	r3, [r2, #28]
 8001886:	4b85      	ldr	r3, [pc, #532]	; (8001a9c <HAL_RCC_OscConfig+0x4c4>)
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188e:	60bb      	str	r3, [r7, #8]
 8001890:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001892:	2301      	movs	r3, #1
 8001894:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001896:	4b82      	ldr	r3, [pc, #520]	; (8001aa0 <HAL_RCC_OscConfig+0x4c8>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d118      	bne.n	80018d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018a2:	4b7f      	ldr	r3, [pc, #508]	; (8001aa0 <HAL_RCC_OscConfig+0x4c8>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a7e      	ldr	r2, [pc, #504]	; (8001aa0 <HAL_RCC_OscConfig+0x4c8>)
 80018a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ae:	f7ff f87f 	bl	80009b0 <HAL_GetTick>
 80018b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b4:	e008      	b.n	80018c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018b6:	f7ff f87b 	bl	80009b0 <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b64      	cmp	r3, #100	; 0x64
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e103      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c8:	4b75      	ldr	r3, [pc, #468]	; (8001aa0 <HAL_RCC_OscConfig+0x4c8>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d0f0      	beq.n	80018b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d106      	bne.n	80018ea <HAL_RCC_OscConfig+0x312>
 80018dc:	4b6f      	ldr	r3, [pc, #444]	; (8001a9c <HAL_RCC_OscConfig+0x4c4>)
 80018de:	6a1b      	ldr	r3, [r3, #32]
 80018e0:	4a6e      	ldr	r2, [pc, #440]	; (8001a9c <HAL_RCC_OscConfig+0x4c4>)
 80018e2:	f043 0301 	orr.w	r3, r3, #1
 80018e6:	6213      	str	r3, [r2, #32]
 80018e8:	e02d      	b.n	8001946 <HAL_RCC_OscConfig+0x36e>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d10c      	bne.n	800190c <HAL_RCC_OscConfig+0x334>
 80018f2:	4b6a      	ldr	r3, [pc, #424]	; (8001a9c <HAL_RCC_OscConfig+0x4c4>)
 80018f4:	6a1b      	ldr	r3, [r3, #32]
 80018f6:	4a69      	ldr	r2, [pc, #420]	; (8001a9c <HAL_RCC_OscConfig+0x4c4>)
 80018f8:	f023 0301 	bic.w	r3, r3, #1
 80018fc:	6213      	str	r3, [r2, #32]
 80018fe:	4b67      	ldr	r3, [pc, #412]	; (8001a9c <HAL_RCC_OscConfig+0x4c4>)
 8001900:	6a1b      	ldr	r3, [r3, #32]
 8001902:	4a66      	ldr	r2, [pc, #408]	; (8001a9c <HAL_RCC_OscConfig+0x4c4>)
 8001904:	f023 0304 	bic.w	r3, r3, #4
 8001908:	6213      	str	r3, [r2, #32]
 800190a:	e01c      	b.n	8001946 <HAL_RCC_OscConfig+0x36e>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	2b05      	cmp	r3, #5
 8001912:	d10c      	bne.n	800192e <HAL_RCC_OscConfig+0x356>
 8001914:	4b61      	ldr	r3, [pc, #388]	; (8001a9c <HAL_RCC_OscConfig+0x4c4>)
 8001916:	6a1b      	ldr	r3, [r3, #32]
 8001918:	4a60      	ldr	r2, [pc, #384]	; (8001a9c <HAL_RCC_OscConfig+0x4c4>)
 800191a:	f043 0304 	orr.w	r3, r3, #4
 800191e:	6213      	str	r3, [r2, #32]
 8001920:	4b5e      	ldr	r3, [pc, #376]	; (8001a9c <HAL_RCC_OscConfig+0x4c4>)
 8001922:	6a1b      	ldr	r3, [r3, #32]
 8001924:	4a5d      	ldr	r2, [pc, #372]	; (8001a9c <HAL_RCC_OscConfig+0x4c4>)
 8001926:	f043 0301 	orr.w	r3, r3, #1
 800192a:	6213      	str	r3, [r2, #32]
 800192c:	e00b      	b.n	8001946 <HAL_RCC_OscConfig+0x36e>
 800192e:	4b5b      	ldr	r3, [pc, #364]	; (8001a9c <HAL_RCC_OscConfig+0x4c4>)
 8001930:	6a1b      	ldr	r3, [r3, #32]
 8001932:	4a5a      	ldr	r2, [pc, #360]	; (8001a9c <HAL_RCC_OscConfig+0x4c4>)
 8001934:	f023 0301 	bic.w	r3, r3, #1
 8001938:	6213      	str	r3, [r2, #32]
 800193a:	4b58      	ldr	r3, [pc, #352]	; (8001a9c <HAL_RCC_OscConfig+0x4c4>)
 800193c:	6a1b      	ldr	r3, [r3, #32]
 800193e:	4a57      	ldr	r2, [pc, #348]	; (8001a9c <HAL_RCC_OscConfig+0x4c4>)
 8001940:	f023 0304 	bic.w	r3, r3, #4
 8001944:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d015      	beq.n	800197a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800194e:	f7ff f82f 	bl	80009b0 <HAL_GetTick>
 8001952:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001954:	e00a      	b.n	800196c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001956:	f7ff f82b 	bl	80009b0 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	f241 3288 	movw	r2, #5000	; 0x1388
 8001964:	4293      	cmp	r3, r2
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e0b1      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800196c:	4b4b      	ldr	r3, [pc, #300]	; (8001a9c <HAL_RCC_OscConfig+0x4c4>)
 800196e:	6a1b      	ldr	r3, [r3, #32]
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	2b00      	cmp	r3, #0
 8001976:	d0ee      	beq.n	8001956 <HAL_RCC_OscConfig+0x37e>
 8001978:	e014      	b.n	80019a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800197a:	f7ff f819 	bl	80009b0 <HAL_GetTick>
 800197e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001980:	e00a      	b.n	8001998 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001982:	f7ff f815 	bl	80009b0 <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001990:	4293      	cmp	r3, r2
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e09b      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001998:	4b40      	ldr	r3, [pc, #256]	; (8001a9c <HAL_RCC_OscConfig+0x4c4>)
 800199a:	6a1b      	ldr	r3, [r3, #32]
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d1ee      	bne.n	8001982 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80019a4:	7dfb      	ldrb	r3, [r7, #23]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d105      	bne.n	80019b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019aa:	4b3c      	ldr	r3, [pc, #240]	; (8001a9c <HAL_RCC_OscConfig+0x4c4>)
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	4a3b      	ldr	r2, [pc, #236]	; (8001a9c <HAL_RCC_OscConfig+0x4c4>)
 80019b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	f000 8087 	beq.w	8001ace <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019c0:	4b36      	ldr	r3, [pc, #216]	; (8001a9c <HAL_RCC_OscConfig+0x4c4>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 030c 	and.w	r3, r3, #12
 80019c8:	2b08      	cmp	r3, #8
 80019ca:	d061      	beq.n	8001a90 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	69db      	ldr	r3, [r3, #28]
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d146      	bne.n	8001a62 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019d4:	4b33      	ldr	r3, [pc, #204]	; (8001aa4 <HAL_RCC_OscConfig+0x4cc>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019da:	f7fe ffe9 	bl	80009b0 <HAL_GetTick>
 80019de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019e0:	e008      	b.n	80019f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e2:	f7fe ffe5 	bl	80009b0 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e06d      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019f4:	4b29      	ldr	r3, [pc, #164]	; (8001a9c <HAL_RCC_OscConfig+0x4c4>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d1f0      	bne.n	80019e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a1b      	ldr	r3, [r3, #32]
 8001a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a08:	d108      	bne.n	8001a1c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a0a:	4b24      	ldr	r3, [pc, #144]	; (8001a9c <HAL_RCC_OscConfig+0x4c4>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	4921      	ldr	r1, [pc, #132]	; (8001a9c <HAL_RCC_OscConfig+0x4c4>)
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a1c:	4b1f      	ldr	r3, [pc, #124]	; (8001a9c <HAL_RCC_OscConfig+0x4c4>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a19      	ldr	r1, [r3, #32]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2c:	430b      	orrs	r3, r1
 8001a2e:	491b      	ldr	r1, [pc, #108]	; (8001a9c <HAL_RCC_OscConfig+0x4c4>)
 8001a30:	4313      	orrs	r3, r2
 8001a32:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a34:	4b1b      	ldr	r3, [pc, #108]	; (8001aa4 <HAL_RCC_OscConfig+0x4cc>)
 8001a36:	2201      	movs	r2, #1
 8001a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3a:	f7fe ffb9 	bl	80009b0 <HAL_GetTick>
 8001a3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a40:	e008      	b.n	8001a54 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a42:	f7fe ffb5 	bl	80009b0 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e03d      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a54:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <HAL_RCC_OscConfig+0x4c4>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d0f0      	beq.n	8001a42 <HAL_RCC_OscConfig+0x46a>
 8001a60:	e035      	b.n	8001ace <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a62:	4b10      	ldr	r3, [pc, #64]	; (8001aa4 <HAL_RCC_OscConfig+0x4cc>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a68:	f7fe ffa2 	bl	80009b0 <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a70:	f7fe ff9e 	bl	80009b0 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e026      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a82:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <HAL_RCC_OscConfig+0x4c4>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1f0      	bne.n	8001a70 <HAL_RCC_OscConfig+0x498>
 8001a8e:	e01e      	b.n	8001ace <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	69db      	ldr	r3, [r3, #28]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d107      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e019      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4f8>
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40007000 	.word	0x40007000
 8001aa4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001aa8:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <HAL_RCC_OscConfig+0x500>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d106      	bne.n	8001aca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d001      	beq.n	8001ace <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e000      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3718      	adds	r7, #24
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40021000 	.word	0x40021000

08001adc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d101      	bne.n	8001af0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e0d0      	b.n	8001c92 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001af0:	4b6a      	ldr	r3, [pc, #424]	; (8001c9c <HAL_RCC_ClockConfig+0x1c0>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0307 	and.w	r3, r3, #7
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d910      	bls.n	8001b20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001afe:	4b67      	ldr	r3, [pc, #412]	; (8001c9c <HAL_RCC_ClockConfig+0x1c0>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f023 0207 	bic.w	r2, r3, #7
 8001b06:	4965      	ldr	r1, [pc, #404]	; (8001c9c <HAL_RCC_ClockConfig+0x1c0>)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b0e:	4b63      	ldr	r3, [pc, #396]	; (8001c9c <HAL_RCC_ClockConfig+0x1c0>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	683a      	ldr	r2, [r7, #0]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d001      	beq.n	8001b20 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e0b8      	b.n	8001c92 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d020      	beq.n	8001b6e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0304 	and.w	r3, r3, #4
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d005      	beq.n	8001b44 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b38:	4b59      	ldr	r3, [pc, #356]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	4a58      	ldr	r2, [pc, #352]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b42:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0308 	and.w	r3, r3, #8
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d005      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b50:	4b53      	ldr	r3, [pc, #332]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	4a52      	ldr	r2, [pc, #328]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b56:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b5a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b5c:	4b50      	ldr	r3, [pc, #320]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	494d      	ldr	r1, [pc, #308]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d040      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d107      	bne.n	8001b92 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b82:	4b47      	ldr	r3, [pc, #284]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d115      	bne.n	8001bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e07f      	b.n	8001c92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d107      	bne.n	8001baa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b9a:	4b41      	ldr	r3, [pc, #260]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d109      	bne.n	8001bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e073      	b.n	8001c92 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001baa:	4b3d      	ldr	r3, [pc, #244]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e06b      	b.n	8001c92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bba:	4b39      	ldr	r3, [pc, #228]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f023 0203 	bic.w	r2, r3, #3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	4936      	ldr	r1, [pc, #216]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bcc:	f7fe fef0 	bl	80009b0 <HAL_GetTick>
 8001bd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd2:	e00a      	b.n	8001bea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bd4:	f7fe feec 	bl	80009b0 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e053      	b.n	8001c92 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bea:	4b2d      	ldr	r3, [pc, #180]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f003 020c 	and.w	r2, r3, #12
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d1eb      	bne.n	8001bd4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bfc:	4b27      	ldr	r3, [pc, #156]	; (8001c9c <HAL_RCC_ClockConfig+0x1c0>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0307 	and.w	r3, r3, #7
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d210      	bcs.n	8001c2c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0a:	4b24      	ldr	r3, [pc, #144]	; (8001c9c <HAL_RCC_ClockConfig+0x1c0>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f023 0207 	bic.w	r2, r3, #7
 8001c12:	4922      	ldr	r1, [pc, #136]	; (8001c9c <HAL_RCC_ClockConfig+0x1c0>)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1a:	4b20      	ldr	r3, [pc, #128]	; (8001c9c <HAL_RCC_ClockConfig+0x1c0>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d001      	beq.n	8001c2c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e032      	b.n	8001c92 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0304 	and.w	r3, r3, #4
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d008      	beq.n	8001c4a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c38:	4b19      	ldr	r3, [pc, #100]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	4916      	ldr	r1, [pc, #88]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0308 	and.w	r3, r3, #8
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d009      	beq.n	8001c6a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c56:	4b12      	ldr	r3, [pc, #72]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	490e      	ldr	r1, [pc, #56]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c6a:	f000 f821 	bl	8001cb0 <HAL_RCC_GetSysClockFreq>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	091b      	lsrs	r3, r3, #4
 8001c76:	f003 030f 	and.w	r3, r3, #15
 8001c7a:	490a      	ldr	r1, [pc, #40]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8001c7c:	5ccb      	ldrb	r3, [r1, r3]
 8001c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c82:	4a09      	ldr	r2, [pc, #36]	; (8001ca8 <HAL_RCC_ClockConfig+0x1cc>)
 8001c84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c86:	4b09      	ldr	r3, [pc, #36]	; (8001cac <HAL_RCC_ClockConfig+0x1d0>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7fe fe4e 	bl	800092c <HAL_InitTick>

  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40022000 	.word	0x40022000
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	08002e74 	.word	0x08002e74
 8001ca8:	20000000 	.word	0x20000000
 8001cac:	20000004 	.word	0x20000004

08001cb0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b087      	sub	sp, #28
 8001cb4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60fb      	str	r3, [r7, #12]
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60bb      	str	r3, [r7, #8]
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	617b      	str	r3, [r7, #20]
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001cca:	4b1e      	ldr	r3, [pc, #120]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f003 030c 	and.w	r3, r3, #12
 8001cd6:	2b04      	cmp	r3, #4
 8001cd8:	d002      	beq.n	8001ce0 <HAL_RCC_GetSysClockFreq+0x30>
 8001cda:	2b08      	cmp	r3, #8
 8001cdc:	d003      	beq.n	8001ce6 <HAL_RCC_GetSysClockFreq+0x36>
 8001cde:	e027      	b.n	8001d30 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ce0:	4b19      	ldr	r3, [pc, #100]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ce2:	613b      	str	r3, [r7, #16]
      break;
 8001ce4:	e027      	b.n	8001d36 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	0c9b      	lsrs	r3, r3, #18
 8001cea:	f003 030f 	and.w	r3, r3, #15
 8001cee:	4a17      	ldr	r2, [pc, #92]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001cf0:	5cd3      	ldrb	r3, [r2, r3]
 8001cf2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d010      	beq.n	8001d20 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001cfe:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	0c5b      	lsrs	r3, r3, #17
 8001d04:	f003 0301 	and.w	r3, r3, #1
 8001d08:	4a11      	ldr	r2, [pc, #68]	; (8001d50 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d0a:	5cd3      	ldrb	r3, [r2, r3]
 8001d0c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a0d      	ldr	r2, [pc, #52]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d12:	fb03 f202 	mul.w	r2, r3, r2
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d1c:	617b      	str	r3, [r7, #20]
 8001d1e:	e004      	b.n	8001d2a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4a0c      	ldr	r2, [pc, #48]	; (8001d54 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d24:	fb02 f303 	mul.w	r3, r2, r3
 8001d28:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	613b      	str	r3, [r7, #16]
      break;
 8001d2e:	e002      	b.n	8001d36 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d30:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d32:	613b      	str	r3, [r7, #16]
      break;
 8001d34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d36:	693b      	ldr	r3, [r7, #16]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	371c      	adds	r7, #28
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bc80      	pop	{r7}
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	40021000 	.word	0x40021000
 8001d48:	007a1200 	.word	0x007a1200
 8001d4c:	08002e8c 	.word	0x08002e8c
 8001d50:	08002e9c 	.word	0x08002e9c
 8001d54:	003d0900 	.word	0x003d0900

08001d58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d5c:	4b02      	ldr	r3, [pc, #8]	; (8001d68 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr
 8001d68:	20000000 	.word	0x20000000

08001d6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d70:	f7ff fff2 	bl	8001d58 <HAL_RCC_GetHCLKFreq>
 8001d74:	4602      	mov	r2, r0
 8001d76:	4b05      	ldr	r3, [pc, #20]	; (8001d8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	0a1b      	lsrs	r3, r3, #8
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	4903      	ldr	r1, [pc, #12]	; (8001d90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d82:	5ccb      	ldrb	r3, [r1, r3]
 8001d84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	08002e84 	.word	0x08002e84

08001d94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d98:	f7ff ffde 	bl	8001d58 <HAL_RCC_GetHCLKFreq>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	4b05      	ldr	r3, [pc, #20]	; (8001db4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	0adb      	lsrs	r3, r3, #11
 8001da4:	f003 0307 	and.w	r3, r3, #7
 8001da8:	4903      	ldr	r1, [pc, #12]	; (8001db8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001daa:	5ccb      	ldrb	r3, [r1, r3]
 8001dac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40021000 	.word	0x40021000
 8001db8:	08002e84 	.word	0x08002e84

08001dbc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001dc4:	4b0a      	ldr	r3, [pc, #40]	; (8001df0 <RCC_Delay+0x34>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a0a      	ldr	r2, [pc, #40]	; (8001df4 <RCC_Delay+0x38>)
 8001dca:	fba2 2303 	umull	r2, r3, r2, r3
 8001dce:	0a5b      	lsrs	r3, r3, #9
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	fb02 f303 	mul.w	r3, r2, r3
 8001dd6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001dd8:	bf00      	nop
  }
  while (Delay --);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	1e5a      	subs	r2, r3, #1
 8001dde:	60fa      	str	r2, [r7, #12]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1f9      	bne.n	8001dd8 <RCC_Delay+0x1c>
}
 8001de4:	bf00      	nop
 8001de6:	bf00      	nop
 8001de8:	3714      	adds	r7, #20
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr
 8001df0:	20000000 	.word	0x20000000
 8001df4:	10624dd3 	.word	0x10624dd3

08001df8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e042      	b.n	8001e90 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d106      	bne.n	8001e24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f7fe fc2c 	bl	800067c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2224      	movs	r2, #36	; 0x24
 8001e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68da      	ldr	r2, [r3, #12]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 ff53 	bl	8002ce8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	691a      	ldr	r2, [r3, #16]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	695a      	ldr	r2, [r3, #20]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68da      	ldr	r2, [r3, #12]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2220      	movs	r2, #32
 8001e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2220      	movs	r2, #32
 8001e84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b08a      	sub	sp, #40	; 0x28
 8001e9c:	af02      	add	r7, sp, #8
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	603b      	str	r3, [r7, #0]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2b20      	cmp	r3, #32
 8001eb6:	d16d      	bne.n	8001f94 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d002      	beq.n	8001ec4 <HAL_UART_Transmit+0x2c>
 8001ebe:	88fb      	ldrh	r3, [r7, #6]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d101      	bne.n	8001ec8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e066      	b.n	8001f96 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2221      	movs	r2, #33	; 0x21
 8001ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ed6:	f7fe fd6b 	bl	80009b0 <HAL_GetTick>
 8001eda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	88fa      	ldrh	r2, [r7, #6]
 8001ee0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	88fa      	ldrh	r2, [r7, #6]
 8001ee6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ef0:	d108      	bne.n	8001f04 <HAL_UART_Transmit+0x6c>
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d104      	bne.n	8001f04 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001efa:	2300      	movs	r3, #0
 8001efc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	61bb      	str	r3, [r7, #24]
 8001f02:	e003      	b.n	8001f0c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001f0c:	e02a      	b.n	8001f64 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	9300      	str	r3, [sp, #0]
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	2200      	movs	r2, #0
 8001f16:	2180      	movs	r1, #128	; 0x80
 8001f18:	68f8      	ldr	r0, [r7, #12]
 8001f1a:	f000 fc1b 	bl	8002754 <UART_WaitOnFlagUntilTimeout>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e036      	b.n	8001f96 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d10b      	bne.n	8001f46 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	881b      	ldrh	r3, [r3, #0]
 8001f32:	461a      	mov	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	3302      	adds	r3, #2
 8001f42:	61bb      	str	r3, [r7, #24]
 8001f44:	e007      	b.n	8001f56 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	781a      	ldrb	r2, [r3, #0]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	3301      	adds	r3, #1
 8001f54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1cf      	bne.n	8001f0e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	9300      	str	r3, [sp, #0]
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	2200      	movs	r2, #0
 8001f76:	2140      	movs	r1, #64	; 0x40
 8001f78:	68f8      	ldr	r0, [r7, #12]
 8001f7a:	f000 fbeb 	bl	8002754 <UART_WaitOnFlagUntilTimeout>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e006      	b.n	8001f96 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2220      	movs	r2, #32
 8001f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001f90:	2300      	movs	r3, #0
 8001f92:	e000      	b.n	8001f96 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001f94:	2302      	movs	r3, #2
  }
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3720      	adds	r7, #32
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b084      	sub	sp, #16
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	60f8      	str	r0, [r7, #12]
 8001fa6:	60b9      	str	r1, [r7, #8]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	2b20      	cmp	r3, #32
 8001fb6:	d112      	bne.n	8001fde <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d002      	beq.n	8001fc4 <HAL_UART_Receive_DMA+0x26>
 8001fbe:	88fb      	ldrh	r3, [r7, #6]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e00b      	b.n	8001fe0 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8001fce:	88fb      	ldrh	r3, [r7, #6]
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	68b9      	ldr	r1, [r7, #8]
 8001fd4:	68f8      	ldr	r0, [r7, #12]
 8001fd6:	f000 fc2b 	bl	8002830 <UART_Start_Receive_DMA>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	e000      	b.n	8001fe0 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001fde:	2302      	movs	r3, #2
  }
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3710      	adds	r7, #16
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b0ba      	sub	sp, #232	; 0xe8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800200e:	2300      	movs	r3, #0
 8002010:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002014:	2300      	movs	r3, #0
 8002016:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800201a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002026:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800202a:	2b00      	cmp	r3, #0
 800202c:	d10f      	bne.n	800204e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800202e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002032:	f003 0320 	and.w	r3, r3, #32
 8002036:	2b00      	cmp	r3, #0
 8002038:	d009      	beq.n	800204e <HAL_UART_IRQHandler+0x66>
 800203a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800203e:	f003 0320 	and.w	r3, r3, #32
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 fd90 	bl	8002b6c <UART_Receive_IT>
      return;
 800204c:	e25b      	b.n	8002506 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800204e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002052:	2b00      	cmp	r3, #0
 8002054:	f000 80de 	beq.w	8002214 <HAL_UART_IRQHandler+0x22c>
 8002058:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	2b00      	cmp	r3, #0
 8002062:	d106      	bne.n	8002072 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002064:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002068:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800206c:	2b00      	cmp	r3, #0
 800206e:	f000 80d1 	beq.w	8002214 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00b      	beq.n	8002096 <HAL_UART_IRQHandler+0xae>
 800207e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002086:	2b00      	cmp	r3, #0
 8002088:	d005      	beq.n	8002096 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208e:	f043 0201 	orr.w	r2, r3, #1
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800209a:	f003 0304 	and.w	r3, r3, #4
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d00b      	beq.n	80020ba <HAL_UART_IRQHandler+0xd2>
 80020a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d005      	beq.n	80020ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b2:	f043 0202 	orr.w	r2, r3, #2
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80020ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00b      	beq.n	80020de <HAL_UART_IRQHandler+0xf6>
 80020c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d005      	beq.n	80020de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d6:	f043 0204 	orr.w	r2, r3, #4
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80020de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020e2:	f003 0308 	and.w	r3, r3, #8
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d011      	beq.n	800210e <HAL_UART_IRQHandler+0x126>
 80020ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80020ee:	f003 0320 	and.w	r3, r3, #32
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d105      	bne.n	8002102 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80020f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d005      	beq.n	800210e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002106:	f043 0208 	orr.w	r2, r3, #8
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002112:	2b00      	cmp	r3, #0
 8002114:	f000 81f2 	beq.w	80024fc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800211c:	f003 0320 	and.w	r3, r3, #32
 8002120:	2b00      	cmp	r3, #0
 8002122:	d008      	beq.n	8002136 <HAL_UART_IRQHandler+0x14e>
 8002124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002128:	f003 0320 	and.w	r3, r3, #32
 800212c:	2b00      	cmp	r3, #0
 800212e:	d002      	beq.n	8002136 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f000 fd1b 	bl	8002b6c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	695b      	ldr	r3, [r3, #20]
 800213c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002140:	2b00      	cmp	r3, #0
 8002142:	bf14      	ite	ne
 8002144:	2301      	movne	r3, #1
 8002146:	2300      	moveq	r3, #0
 8002148:	b2db      	uxtb	r3, r3
 800214a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002152:	f003 0308 	and.w	r3, r3, #8
 8002156:	2b00      	cmp	r3, #0
 8002158:	d103      	bne.n	8002162 <HAL_UART_IRQHandler+0x17a>
 800215a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800215e:	2b00      	cmp	r3, #0
 8002160:	d04f      	beq.n	8002202 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 fc25 	bl	80029b2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002172:	2b00      	cmp	r3, #0
 8002174:	d041      	beq.n	80021fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	3314      	adds	r3, #20
 800217c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002180:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002184:	e853 3f00 	ldrex	r3, [r3]
 8002188:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800218c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002190:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002194:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	3314      	adds	r3, #20
 800219e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80021a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80021a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80021ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80021b2:	e841 2300 	strex	r3, r2, [r1]
 80021b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80021ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1d9      	bne.n	8002176 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d013      	beq.n	80021f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ce:	4a7e      	ldr	r2, [pc, #504]	; (80023c8 <HAL_UART_IRQHandler+0x3e0>)
 80021d0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7fe fe1c 	bl	8000e14 <HAL_DMA_Abort_IT>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d016      	beq.n	8002210 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80021ec:	4610      	mov	r0, r2
 80021ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021f0:	e00e      	b.n	8002210 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 f99c 	bl	8002530 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021f8:	e00a      	b.n	8002210 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 f998 	bl	8002530 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002200:	e006      	b.n	8002210 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 f994 	bl	8002530 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800220e:	e175      	b.n	80024fc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002210:	bf00      	nop
    return;
 8002212:	e173      	b.n	80024fc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002218:	2b01      	cmp	r3, #1
 800221a:	f040 814f 	bne.w	80024bc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800221e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002222:	f003 0310 	and.w	r3, r3, #16
 8002226:	2b00      	cmp	r3, #0
 8002228:	f000 8148 	beq.w	80024bc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800222c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002230:	f003 0310 	and.w	r3, r3, #16
 8002234:	2b00      	cmp	r3, #0
 8002236:	f000 8141 	beq.w	80024bc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800223a:	2300      	movs	r3, #0
 800223c:	60bb      	str	r3, [r7, #8]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	60bb      	str	r3, [r7, #8]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	60bb      	str	r3, [r7, #8]
 800224e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800225a:	2b00      	cmp	r3, #0
 800225c:	f000 80b6 	beq.w	80023cc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800226c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002270:	2b00      	cmp	r3, #0
 8002272:	f000 8145 	beq.w	8002500 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800227a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800227e:	429a      	cmp	r2, r3
 8002280:	f080 813e 	bcs.w	8002500 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800228a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	2b20      	cmp	r3, #32
 8002294:	f000 8088 	beq.w	80023a8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	330c      	adds	r3, #12
 800229e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80022a6:	e853 3f00 	ldrex	r3, [r3]
 80022aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80022ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	330c      	adds	r3, #12
 80022c0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80022c4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80022c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022cc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80022d0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80022d4:	e841 2300 	strex	r3, r2, [r1]
 80022d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80022dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d1d9      	bne.n	8002298 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	3314      	adds	r3, #20
 80022ea:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022ee:	e853 3f00 	ldrex	r3, [r3]
 80022f2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80022f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022f6:	f023 0301 	bic.w	r3, r3, #1
 80022fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	3314      	adds	r3, #20
 8002304:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002308:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800230c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800230e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002310:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002314:	e841 2300 	strex	r3, r2, [r1]
 8002318:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800231a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800231c:	2b00      	cmp	r3, #0
 800231e:	d1e1      	bne.n	80022e4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	3314      	adds	r3, #20
 8002326:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002328:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800232a:	e853 3f00 	ldrex	r3, [r3]
 800232e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002330:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002332:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002336:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	3314      	adds	r3, #20
 8002340:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002344:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002346:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002348:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800234a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800234c:	e841 2300 	strex	r3, r2, [r1]
 8002350:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002352:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002354:	2b00      	cmp	r3, #0
 8002356:	d1e3      	bne.n	8002320 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2220      	movs	r2, #32
 800235c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	330c      	adds	r3, #12
 800236c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800236e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002370:	e853 3f00 	ldrex	r3, [r3]
 8002374:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002376:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002378:	f023 0310 	bic.w	r3, r3, #16
 800237c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	330c      	adds	r3, #12
 8002386:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800238a:	65ba      	str	r2, [r7, #88]	; 0x58
 800238c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800238e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002390:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002392:	e841 2300 	strex	r3, r2, [r1]
 8002396:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002398:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1e3      	bne.n	8002366 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7fe fcfa 	bl	8000d9c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2202      	movs	r2, #2
 80023ac:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	4619      	mov	r1, r3
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 f8bf 	bl	8002542 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80023c4:	e09c      	b.n	8002500 <HAL_UART_IRQHandler+0x518>
 80023c6:	bf00      	nop
 80023c8:	08002a77 	.word	0x08002a77
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f000 808e 	beq.w	8002504 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80023e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f000 8089 	beq.w	8002504 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	330c      	adds	r3, #12
 80023f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023fc:	e853 3f00 	ldrex	r3, [r3]
 8002400:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002404:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002408:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	330c      	adds	r3, #12
 8002412:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002416:	647a      	str	r2, [r7, #68]	; 0x44
 8002418:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800241a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800241c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800241e:	e841 2300 	strex	r3, r2, [r1]
 8002422:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1e3      	bne.n	80023f2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	3314      	adds	r3, #20
 8002430:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002434:	e853 3f00 	ldrex	r3, [r3]
 8002438:	623b      	str	r3, [r7, #32]
   return(result);
 800243a:	6a3b      	ldr	r3, [r7, #32]
 800243c:	f023 0301 	bic.w	r3, r3, #1
 8002440:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	3314      	adds	r3, #20
 800244a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800244e:	633a      	str	r2, [r7, #48]	; 0x30
 8002450:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002452:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002456:	e841 2300 	strex	r3, r2, [r1]
 800245a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800245c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1e3      	bne.n	800242a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2220      	movs	r2, #32
 8002466:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	330c      	adds	r3, #12
 8002476:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	e853 3f00 	ldrex	r3, [r3]
 800247e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f023 0310 	bic.w	r3, r3, #16
 8002486:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	330c      	adds	r3, #12
 8002490:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002494:	61fa      	str	r2, [r7, #28]
 8002496:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002498:	69b9      	ldr	r1, [r7, #24]
 800249a:	69fa      	ldr	r2, [r7, #28]
 800249c:	e841 2300 	strex	r3, r2, [r1]
 80024a0:	617b      	str	r3, [r7, #20]
   return(result);
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1e3      	bne.n	8002470 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2202      	movs	r2, #2
 80024ac:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80024ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80024b2:	4619      	mov	r1, r3
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f000 f844 	bl	8002542 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80024ba:	e023      	b.n	8002504 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80024bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d009      	beq.n	80024dc <HAL_UART_IRQHandler+0x4f4>
 80024c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 fae2 	bl	8002a9e <UART_Transmit_IT>
    return;
 80024da:	e014      	b.n	8002506 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80024dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d00e      	beq.n	8002506 <HAL_UART_IRQHandler+0x51e>
 80024e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d008      	beq.n	8002506 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f000 fb21 	bl	8002b3c <UART_EndTransmit_IT>
    return;
 80024fa:	e004      	b.n	8002506 <HAL_UART_IRQHandler+0x51e>
    return;
 80024fc:	bf00      	nop
 80024fe:	e002      	b.n	8002506 <HAL_UART_IRQHandler+0x51e>
      return;
 8002500:	bf00      	nop
 8002502:	e000      	b.n	8002506 <HAL_UART_IRQHandler+0x51e>
      return;
 8002504:	bf00      	nop
  }
}
 8002506:	37e8      	adds	r7, #232	; 0xe8
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	bc80      	pop	{r7}
 800251c:	4770      	bx	lr

0800251e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800251e:	b480      	push	{r7}
 8002520:	b083      	sub	sp, #12
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002526:	bf00      	nop
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	bc80      	pop	{r7}
 800252e:	4770      	bx	lr

08002530 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	bc80      	pop	{r7}
 8002540:	4770      	bx	lr

08002542 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002542:	b480      	push	{r7}
 8002544:	b083      	sub	sp, #12
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
 800254a:	460b      	mov	r3, r1
 800254c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	bc80      	pop	{r7}
 8002556:	4770      	bx	lr

08002558 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b09c      	sub	sp, #112	; 0x70
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002564:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0320 	and.w	r3, r3, #32
 8002570:	2b00      	cmp	r3, #0
 8002572:	d172      	bne.n	800265a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002574:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002576:	2200      	movs	r2, #0
 8002578:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800257a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	330c      	adds	r3, #12
 8002580:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002584:	e853 3f00 	ldrex	r3, [r3]
 8002588:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800258a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800258c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002590:	66bb      	str	r3, [r7, #104]	; 0x68
 8002592:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	330c      	adds	r3, #12
 8002598:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800259a:	65ba      	str	r2, [r7, #88]	; 0x58
 800259c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800259e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80025a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80025a2:	e841 2300 	strex	r3, r2, [r1]
 80025a6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80025a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1e5      	bne.n	800257a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	3314      	adds	r3, #20
 80025b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025b8:	e853 3f00 	ldrex	r3, [r3]
 80025bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80025be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025c0:	f023 0301 	bic.w	r3, r3, #1
 80025c4:	667b      	str	r3, [r7, #100]	; 0x64
 80025c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	3314      	adds	r3, #20
 80025cc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80025ce:	647a      	str	r2, [r7, #68]	; 0x44
 80025d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80025d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80025d6:	e841 2300 	strex	r3, r2, [r1]
 80025da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80025dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1e5      	bne.n	80025ae <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	3314      	adds	r3, #20
 80025e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	e853 3f00 	ldrex	r3, [r3]
 80025f0:	623b      	str	r3, [r7, #32]
   return(result);
 80025f2:	6a3b      	ldr	r3, [r7, #32]
 80025f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025f8:	663b      	str	r3, [r7, #96]	; 0x60
 80025fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	3314      	adds	r3, #20
 8002600:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002602:	633a      	str	r2, [r7, #48]	; 0x30
 8002604:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002606:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002608:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800260a:	e841 2300 	strex	r3, r2, [r1]
 800260e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1e5      	bne.n	80025e2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002618:	2220      	movs	r2, #32
 800261a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800261e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002622:	2b01      	cmp	r3, #1
 8002624:	d119      	bne.n	800265a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002626:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	330c      	adds	r3, #12
 800262c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	e853 3f00 	ldrex	r3, [r3]
 8002634:	60fb      	str	r3, [r7, #12]
   return(result);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f023 0310 	bic.w	r3, r3, #16
 800263c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800263e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	330c      	adds	r3, #12
 8002644:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002646:	61fa      	str	r2, [r7, #28]
 8002648:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800264a:	69b9      	ldr	r1, [r7, #24]
 800264c:	69fa      	ldr	r2, [r7, #28]
 800264e:	e841 2300 	strex	r3, r2, [r1]
 8002652:	617b      	str	r3, [r7, #20]
   return(result);
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1e5      	bne.n	8002626 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800265a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800265c:	2200      	movs	r2, #0
 800265e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002660:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002664:	2b01      	cmp	r3, #1
 8002666:	d106      	bne.n	8002676 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002668:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800266a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800266c:	4619      	mov	r1, r3
 800266e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002670:	f7ff ff67 	bl	8002542 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002674:	e002      	b.n	800267c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8002676:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002678:	f7fd fe26 	bl	80002c8 <HAL_UART_RxCpltCallback>
}
 800267c:	bf00      	nop
 800267e:	3770      	adds	r7, #112	; 0x70
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002690:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2201      	movs	r2, #1
 8002696:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269c:	2b01      	cmp	r3, #1
 800269e:	d108      	bne.n	80026b2 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80026a4:	085b      	lsrs	r3, r3, #1
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	4619      	mov	r1, r3
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f7ff ff49 	bl	8002542 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80026b0:	e002      	b.n	80026b8 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f7ff ff33 	bl	800251e <HAL_UART_RxHalfCpltCallback>
}
 80026b8:	bf00      	nop
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80026c8:	2300      	movs	r3, #0
 80026ca:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026dc:	2b00      	cmp	r3, #0
 80026de:	bf14      	ite	ne
 80026e0:	2301      	movne	r3, #1
 80026e2:	2300      	moveq	r3, #0
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b21      	cmp	r3, #33	; 0x21
 80026f2:	d108      	bne.n	8002706 <UART_DMAError+0x46>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d005      	beq.n	8002706 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	2200      	movs	r2, #0
 80026fe:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002700:	68b8      	ldr	r0, [r7, #8]
 8002702:	f000 f92f 	bl	8002964 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	695b      	ldr	r3, [r3, #20]
 800270c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002710:	2b00      	cmp	r3, #0
 8002712:	bf14      	ite	ne
 8002714:	2301      	movne	r3, #1
 8002716:	2300      	moveq	r3, #0
 8002718:	b2db      	uxtb	r3, r3
 800271a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b22      	cmp	r3, #34	; 0x22
 8002726:	d108      	bne.n	800273a <UART_DMAError+0x7a>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d005      	beq.n	800273a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	2200      	movs	r2, #0
 8002732:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002734:	68b8      	ldr	r0, [r7, #8]
 8002736:	f000 f93c 	bl	80029b2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273e:	f043 0210 	orr.w	r2, r3, #16
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002746:	68b8      	ldr	r0, [r7, #8]
 8002748:	f7ff fef2 	bl	8002530 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800274c:	bf00      	nop
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b090      	sub	sp, #64	; 0x40
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	603b      	str	r3, [r7, #0]
 8002760:	4613      	mov	r3, r2
 8002762:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002764:	e050      	b.n	8002808 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002766:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800276c:	d04c      	beq.n	8002808 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800276e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002770:	2b00      	cmp	r3, #0
 8002772:	d007      	beq.n	8002784 <UART_WaitOnFlagUntilTimeout+0x30>
 8002774:	f7fe f91c 	bl	80009b0 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002780:	429a      	cmp	r2, r3
 8002782:	d241      	bcs.n	8002808 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	330c      	adds	r3, #12
 800278a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800278c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800278e:	e853 3f00 	ldrex	r3, [r3]
 8002792:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002796:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800279a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	330c      	adds	r3, #12
 80027a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80027a4:	637a      	str	r2, [r7, #52]	; 0x34
 80027a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80027aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027ac:	e841 2300 	strex	r3, r2, [r1]
 80027b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80027b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1e5      	bne.n	8002784 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	3314      	adds	r3, #20
 80027be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	e853 3f00 	ldrex	r3, [r3]
 80027c6:	613b      	str	r3, [r7, #16]
   return(result);
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	f023 0301 	bic.w	r3, r3, #1
 80027ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	3314      	adds	r3, #20
 80027d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027d8:	623a      	str	r2, [r7, #32]
 80027da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027dc:	69f9      	ldr	r1, [r7, #28]
 80027de:	6a3a      	ldr	r2, [r7, #32]
 80027e0:	e841 2300 	strex	r3, r2, [r1]
 80027e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1e5      	bne.n	80027b8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2220      	movs	r2, #32
 80027f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2220      	movs	r2, #32
 80027f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e00f      	b.n	8002828 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	4013      	ands	r3, r2
 8002812:	68ba      	ldr	r2, [r7, #8]
 8002814:	429a      	cmp	r2, r3
 8002816:	bf0c      	ite	eq
 8002818:	2301      	moveq	r3, #1
 800281a:	2300      	movne	r3, #0
 800281c:	b2db      	uxtb	r3, r3
 800281e:	461a      	mov	r2, r3
 8002820:	79fb      	ldrb	r3, [r7, #7]
 8002822:	429a      	cmp	r2, r3
 8002824:	d09f      	beq.n	8002766 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3740      	adds	r7, #64	; 0x40
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b098      	sub	sp, #96	; 0x60
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	4613      	mov	r3, r2
 800283c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800283e:	68ba      	ldr	r2, [r7, #8]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	88fa      	ldrh	r2, [r7, #6]
 8002848:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2222      	movs	r2, #34	; 0x22
 8002854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800285c:	4a3e      	ldr	r2, [pc, #248]	; (8002958 <UART_Start_Receive_DMA+0x128>)
 800285e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002864:	4a3d      	ldr	r2, [pc, #244]	; (800295c <UART_Start_Receive_DMA+0x12c>)
 8002866:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800286c:	4a3c      	ldr	r2, [pc, #240]	; (8002960 <UART_Start_Receive_DMA+0x130>)
 800286e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002874:	2200      	movs	r2, #0
 8002876:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002878:	f107 0308 	add.w	r3, r7, #8
 800287c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	3304      	adds	r3, #4
 8002888:	4619      	mov	r1, r3
 800288a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	88fb      	ldrh	r3, [r7, #6]
 8002890:	f7fe fa24 	bl	8000cdc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002894:	2300      	movs	r3, #0
 8002896:	613b      	str	r3, [r7, #16]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	613b      	str	r3, [r7, #16]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	613b      	str	r3, [r7, #16]
 80028a8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d019      	beq.n	80028e6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	330c      	adds	r3, #12
 80028b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028bc:	e853 3f00 	ldrex	r3, [r3]
 80028c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80028c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	330c      	adds	r3, #12
 80028d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80028d2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80028d4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028d6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80028d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028da:	e841 2300 	strex	r3, r2, [r1]
 80028de:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80028e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1e5      	bne.n	80028b2 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	3314      	adds	r3, #20
 80028ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f0:	e853 3f00 	ldrex	r3, [r3]
 80028f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80028f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f8:	f043 0301 	orr.w	r3, r3, #1
 80028fc:	657b      	str	r3, [r7, #84]	; 0x54
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	3314      	adds	r3, #20
 8002904:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002906:	63ba      	str	r2, [r7, #56]	; 0x38
 8002908:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800290a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800290c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800290e:	e841 2300 	strex	r3, r2, [r1]
 8002912:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1e5      	bne.n	80028e6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	3314      	adds	r3, #20
 8002920:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	e853 3f00 	ldrex	r3, [r3]
 8002928:	617b      	str	r3, [r7, #20]
   return(result);
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002930:	653b      	str	r3, [r7, #80]	; 0x50
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	3314      	adds	r3, #20
 8002938:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800293a:	627a      	str	r2, [r7, #36]	; 0x24
 800293c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800293e:	6a39      	ldr	r1, [r7, #32]
 8002940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002942:	e841 2300 	strex	r3, r2, [r1]
 8002946:	61fb      	str	r3, [r7, #28]
   return(result);
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1e5      	bne.n	800291a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	3760      	adds	r7, #96	; 0x60
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	08002559 	.word	0x08002559
 800295c:	08002685 	.word	0x08002685
 8002960:	080026c1 	.word	0x080026c1

08002964 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002964:	b480      	push	{r7}
 8002966:	b089      	sub	sp, #36	; 0x24
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	330c      	adds	r3, #12
 8002972:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	e853 3f00 	ldrex	r3, [r3]
 800297a:	60bb      	str	r3, [r7, #8]
   return(result);
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002982:	61fb      	str	r3, [r7, #28]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	330c      	adds	r3, #12
 800298a:	69fa      	ldr	r2, [r7, #28]
 800298c:	61ba      	str	r2, [r7, #24]
 800298e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002990:	6979      	ldr	r1, [r7, #20]
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	e841 2300 	strex	r3, r2, [r1]
 8002998:	613b      	str	r3, [r7, #16]
   return(result);
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d1e5      	bne.n	800296c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2220      	movs	r2, #32
 80029a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80029a8:	bf00      	nop
 80029aa:	3724      	adds	r7, #36	; 0x24
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bc80      	pop	{r7}
 80029b0:	4770      	bx	lr

080029b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b095      	sub	sp, #84	; 0x54
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	330c      	adds	r3, #12
 80029c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029c4:	e853 3f00 	ldrex	r3, [r3]
 80029c8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80029ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80029d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	330c      	adds	r3, #12
 80029d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029da:	643a      	str	r2, [r7, #64]	; 0x40
 80029dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80029e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80029e2:	e841 2300 	strex	r3, r2, [r1]
 80029e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80029e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1e5      	bne.n	80029ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	3314      	adds	r3, #20
 80029f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029f6:	6a3b      	ldr	r3, [r7, #32]
 80029f8:	e853 3f00 	ldrex	r3, [r3]
 80029fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	f023 0301 	bic.w	r3, r3, #1
 8002a04:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	3314      	adds	r3, #20
 8002a0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a10:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a16:	e841 2300 	strex	r3, r2, [r1]
 8002a1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1e5      	bne.n	80029ee <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d119      	bne.n	8002a5e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	330c      	adds	r3, #12
 8002a30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	e853 3f00 	ldrex	r3, [r3]
 8002a38:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	f023 0310 	bic.w	r3, r3, #16
 8002a40:	647b      	str	r3, [r7, #68]	; 0x44
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	330c      	adds	r3, #12
 8002a48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a4a:	61ba      	str	r2, [r7, #24]
 8002a4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a4e:	6979      	ldr	r1, [r7, #20]
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	e841 2300 	strex	r3, r2, [r1]
 8002a56:	613b      	str	r3, [r7, #16]
   return(result);
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1e5      	bne.n	8002a2a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2220      	movs	r2, #32
 8002a62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002a6c:	bf00      	nop
 8002a6e:	3754      	adds	r7, #84	; 0x54
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bc80      	pop	{r7}
 8002a74:	4770      	bx	lr

08002a76 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b084      	sub	sp, #16
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2200      	movs	r2, #0
 8002a88:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f7ff fd4d 	bl	8002530 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002a96:	bf00      	nop
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b085      	sub	sp, #20
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b21      	cmp	r3, #33	; 0x21
 8002ab0:	d13e      	bne.n	8002b30 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aba:	d114      	bne.n	8002ae6 <UART_Transmit_IT+0x48>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d110      	bne.n	8002ae6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a1b      	ldr	r3, [r3, #32]
 8002ac8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	881b      	ldrh	r3, [r3, #0]
 8002ace:	461a      	mov	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ad8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	1c9a      	adds	r2, r3, #2
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	621a      	str	r2, [r3, #32]
 8002ae4:	e008      	b.n	8002af8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	1c59      	adds	r1, r3, #1
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	6211      	str	r1, [r2, #32]
 8002af0:	781a      	ldrb	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	3b01      	subs	r3, #1
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	4619      	mov	r1, r3
 8002b06:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d10f      	bne.n	8002b2c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68da      	ldr	r2, [r3, #12]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b1a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68da      	ldr	r2, [r3, #12]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b2a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	e000      	b.n	8002b32 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002b30:	2302      	movs	r3, #2
  }
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3714      	adds	r7, #20
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bc80      	pop	{r7}
 8002b3a:	4770      	bx	lr

08002b3c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68da      	ldr	r2, [r3, #12]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b52:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2220      	movs	r2, #32
 8002b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f7ff fcd5 	bl	800250c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3708      	adds	r7, #8
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b08c      	sub	sp, #48	; 0x30
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	2b22      	cmp	r3, #34	; 0x22
 8002b7e:	f040 80ae 	bne.w	8002cde <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b8a:	d117      	bne.n	8002bbc <UART_Receive_IT+0x50>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d113      	bne.n	8002bbc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002b94:	2300      	movs	r3, #0
 8002b96:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb4:	1c9a      	adds	r2, r3, #2
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	629a      	str	r2, [r3, #40]	; 0x28
 8002bba:	e026      	b.n	8002c0a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bce:	d007      	beq.n	8002be0 <UART_Receive_IT+0x74>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d10a      	bne.n	8002bee <UART_Receive_IT+0x82>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d106      	bne.n	8002bee <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	b2da      	uxtb	r2, r3
 8002be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bea:	701a      	strb	r2, [r3, #0]
 8002bec:	e008      	b.n	8002c00 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bfa:	b2da      	uxtb	r2, r3
 8002bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bfe:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c04:	1c5a      	adds	r2, r3, #1
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	3b01      	subs	r3, #1
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	4619      	mov	r1, r3
 8002c18:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d15d      	bne.n	8002cda <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68da      	ldr	r2, [r3, #12]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f022 0220 	bic.w	r2, r2, #32
 8002c2c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68da      	ldr	r2, [r3, #12]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c3c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	695a      	ldr	r2, [r3, #20]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 0201 	bic.w	r2, r2, #1
 8002c4c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2220      	movs	r2, #32
 8002c52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d135      	bne.n	8002cd0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	330c      	adds	r3, #12
 8002c70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	e853 3f00 	ldrex	r3, [r3]
 8002c78:	613b      	str	r3, [r7, #16]
   return(result);
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	f023 0310 	bic.w	r3, r3, #16
 8002c80:	627b      	str	r3, [r7, #36]	; 0x24
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	330c      	adds	r3, #12
 8002c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c8a:	623a      	str	r2, [r7, #32]
 8002c8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c8e:	69f9      	ldr	r1, [r7, #28]
 8002c90:	6a3a      	ldr	r2, [r7, #32]
 8002c92:	e841 2300 	strex	r3, r2, [r1]
 8002c96:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1e5      	bne.n	8002c6a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0310 	and.w	r3, r3, #16
 8002ca8:	2b10      	cmp	r3, #16
 8002caa:	d10a      	bne.n	8002cc2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002cac:	2300      	movs	r3, #0
 8002cae:	60fb      	str	r3, [r7, #12]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	60fb      	str	r3, [r7, #12]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	60fb      	str	r3, [r7, #12]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f7ff fc3a 	bl	8002542 <HAL_UARTEx_RxEventCallback>
 8002cce:	e002      	b.n	8002cd6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f7fd faf9 	bl	80002c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	e002      	b.n	8002ce0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	e000      	b.n	8002ce0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002cde:	2302      	movs	r3, #2
  }
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3730      	adds	r7, #48	; 0x30
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	68da      	ldr	r2, [r3, #12]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689a      	ldr	r2, [r3, #8]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002d22:	f023 030c 	bic.w	r3, r3, #12
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	6812      	ldr	r2, [r2, #0]
 8002d2a:	68b9      	ldr	r1, [r7, #8]
 8002d2c:	430b      	orrs	r3, r1
 8002d2e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	699a      	ldr	r2, [r3, #24]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	430a      	orrs	r2, r1
 8002d44:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a2c      	ldr	r2, [pc, #176]	; (8002dfc <UART_SetConfig+0x114>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d103      	bne.n	8002d58 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002d50:	f7ff f820 	bl	8001d94 <HAL_RCC_GetPCLK2Freq>
 8002d54:	60f8      	str	r0, [r7, #12]
 8002d56:	e002      	b.n	8002d5e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002d58:	f7ff f808 	bl	8001d6c <HAL_RCC_GetPCLK1Freq>
 8002d5c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	4613      	mov	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4413      	add	r3, r2
 8002d66:	009a      	lsls	r2, r3, #2
 8002d68:	441a      	add	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d74:	4a22      	ldr	r2, [pc, #136]	; (8002e00 <UART_SetConfig+0x118>)
 8002d76:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7a:	095b      	lsrs	r3, r3, #5
 8002d7c:	0119      	lsls	r1, r3, #4
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	4613      	mov	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	4413      	add	r3, r2
 8002d86:	009a      	lsls	r2, r3, #2
 8002d88:	441a      	add	r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d94:	4b1a      	ldr	r3, [pc, #104]	; (8002e00 <UART_SetConfig+0x118>)
 8002d96:	fba3 0302 	umull	r0, r3, r3, r2
 8002d9a:	095b      	lsrs	r3, r3, #5
 8002d9c:	2064      	movs	r0, #100	; 0x64
 8002d9e:	fb00 f303 	mul.w	r3, r0, r3
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	011b      	lsls	r3, r3, #4
 8002da6:	3332      	adds	r3, #50	; 0x32
 8002da8:	4a15      	ldr	r2, [pc, #84]	; (8002e00 <UART_SetConfig+0x118>)
 8002daa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dae:	095b      	lsrs	r3, r3, #5
 8002db0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002db4:	4419      	add	r1, r3
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	4613      	mov	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4413      	add	r3, r2
 8002dbe:	009a      	lsls	r2, r3, #2
 8002dc0:	441a      	add	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002dcc:	4b0c      	ldr	r3, [pc, #48]	; (8002e00 <UART_SetConfig+0x118>)
 8002dce:	fba3 0302 	umull	r0, r3, r3, r2
 8002dd2:	095b      	lsrs	r3, r3, #5
 8002dd4:	2064      	movs	r0, #100	; 0x64
 8002dd6:	fb00 f303 	mul.w	r3, r0, r3
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	011b      	lsls	r3, r3, #4
 8002dde:	3332      	adds	r3, #50	; 0x32
 8002de0:	4a07      	ldr	r2, [pc, #28]	; (8002e00 <UART_SetConfig+0x118>)
 8002de2:	fba2 2303 	umull	r2, r3, r2, r3
 8002de6:	095b      	lsrs	r3, r3, #5
 8002de8:	f003 020f 	and.w	r2, r3, #15
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	440a      	add	r2, r1
 8002df2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002df4:	bf00      	nop
 8002df6:	3710      	adds	r7, #16
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40013800 	.word	0x40013800
 8002e00:	51eb851f 	.word	0x51eb851f

08002e04 <memset>:
 8002e04:	4603      	mov	r3, r0
 8002e06:	4402      	add	r2, r0
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d100      	bne.n	8002e0e <memset+0xa>
 8002e0c:	4770      	bx	lr
 8002e0e:	f803 1b01 	strb.w	r1, [r3], #1
 8002e12:	e7f9      	b.n	8002e08 <memset+0x4>

08002e14 <__libc_init_array>:
 8002e14:	b570      	push	{r4, r5, r6, lr}
 8002e16:	2600      	movs	r6, #0
 8002e18:	4d0c      	ldr	r5, [pc, #48]	; (8002e4c <__libc_init_array+0x38>)
 8002e1a:	4c0d      	ldr	r4, [pc, #52]	; (8002e50 <__libc_init_array+0x3c>)
 8002e1c:	1b64      	subs	r4, r4, r5
 8002e1e:	10a4      	asrs	r4, r4, #2
 8002e20:	42a6      	cmp	r6, r4
 8002e22:	d109      	bne.n	8002e38 <__libc_init_array+0x24>
 8002e24:	f000 f81a 	bl	8002e5c <_init>
 8002e28:	2600      	movs	r6, #0
 8002e2a:	4d0a      	ldr	r5, [pc, #40]	; (8002e54 <__libc_init_array+0x40>)
 8002e2c:	4c0a      	ldr	r4, [pc, #40]	; (8002e58 <__libc_init_array+0x44>)
 8002e2e:	1b64      	subs	r4, r4, r5
 8002e30:	10a4      	asrs	r4, r4, #2
 8002e32:	42a6      	cmp	r6, r4
 8002e34:	d105      	bne.n	8002e42 <__libc_init_array+0x2e>
 8002e36:	bd70      	pop	{r4, r5, r6, pc}
 8002e38:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e3c:	4798      	blx	r3
 8002e3e:	3601      	adds	r6, #1
 8002e40:	e7ee      	b.n	8002e20 <__libc_init_array+0xc>
 8002e42:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e46:	4798      	blx	r3
 8002e48:	3601      	adds	r6, #1
 8002e4a:	e7f2      	b.n	8002e32 <__libc_init_array+0x1e>
 8002e4c:	08002ea0 	.word	0x08002ea0
 8002e50:	08002ea0 	.word	0x08002ea0
 8002e54:	08002ea0 	.word	0x08002ea0
 8002e58:	08002ea4 	.word	0x08002ea4

08002e5c <_init>:
 8002e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e5e:	bf00      	nop
 8002e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e62:	bc08      	pop	{r3}
 8002e64:	469e      	mov	lr, r3
 8002e66:	4770      	bx	lr

08002e68 <_fini>:
 8002e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e6a:	bf00      	nop
 8002e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e6e:	bc08      	pop	{r3}
 8002e70:	469e      	mov	lr, r3
 8002e72:	4770      	bx	lr
